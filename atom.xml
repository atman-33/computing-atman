<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Computing Atman</title>
  
  <subtitle>コンピューティング アートマン</subtitle>
  <link href="https://www.computing-atman.com/atom.xml" rel="self"/>
  
  <link href="https://www.computing-atman.com/"/>
  <updated>2023-03-11T14:06:59.103Z</updated>
  <id>https://www.computing-atman.com/</id>
  
  <author>
    <name>Atman</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Oracle】21c XE 構築手順</title>
    <link href="https://www.computing-atman.com/2023/03/11/34-install-oracle-xe/"/>
    <id>https://www.computing-atman.com/2023/03/11/34-install-oracle-xe/</id>
    <published>2023-03-11T12:54:17.000Z</published>
    <updated>2023-03-11T14:06:59.103Z</updated>
    
    <content type="html"><![CDATA[<p>Windows PCに、「Oracle Database 21c Express Edition (XE)」をインストールして利用する方法を記しておきます。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#oracle-xe-%E3%81%A8%E3%81%AF">Oracle XE とは</a></li><li><a href="#%E6%89%8B%E9%A0%86">手順</a><ul><li><a href="#1-%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">1. ダウンロード</a></li><li><a href="#2-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">2. インストール</a></li><li><a href="#3-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E4%BD%9C%E6%88%90">3. ユーザー作成</a></li><li><a href="#4-tnsnamesora-%E7%B7%A8%E9%9B%86">4. tnsnames.ora 編集</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="oracle-xe-とは">Oracle XE とは</span></h2><p>特徴は以下の通りです。</p><ul><li>無償かつ本番環境でOracle Database XEを使用可能</li><li>最大12GBのユーザー・データ</li><li>最大2GBのデータベースRAM</li><li>最大2つのCPUスレッド</li></ul><p>私はアプリ開発用で、個人PCにインストールしています。</p><p>※公式HPのOracle XE説明<br><a href="https://www.oracle.com/jp/database/technologies/appdev/xe.html">https://www.oracle.com/jp/database/technologies/appdev/xe.html</a></p><h2><span id="手順">手順</span></h2><h3><span id="1-ダウンロード">1. ダウンロード</span></h3><p>Webから「Oracle Database XE」をダウンロードします。</p><p><a href="https://www.oracle.com/jp/database/technologies/xe-downloads.html">https://www.oracle.com/jp/database/technologies/xe-downloads.html</a></p><img src="/2023/03/11/34-install-oracle-xe/1.png" class><p>「Oracle Database 21c Express Edition for Windows x64」をクリックし、ダウンロードを開始します。</p><h3><span id="2-インストール">2. インストール</span></h3><p>ダウンロードした「OracleXE213_Win64.zip」ファイルを解凍します。</p><p>解凍して作成されたフォルダ内の「setup.exe」を実行します。</p><p>「次へ」ボタン押下、「使用許諾条項の受け入れ」にチェックを入れて進めます。</p><p>宛先フォルダ画面で、インストール先を設定します。私は下記に変更しました。</p><p><code>宛先フォルダ： C:\oracle\product\21c\</code></p><p>上記の場合、Oracle環境変数も合わせて変更されます。</p><p><code>Oracleホーム： C:\oracle\product\21c\dbhomeXE\</code><br><code>Oracleベース： C:\oracle\product\21c\</code></p><p>Oracle Database情報で、データベース・パスワードを設定します。<br>（SYS、SYSTEM、PDBADMINアカウントのパスワード）</p><p><code>パスワード例）sys</code></p><p>正常にインストール完了後、DB関連情報が表示されます。</p><img src="/2023/03/11/34-install-oracle-xe/2.png" class><p>これでインストール完了です。</p><h3><span id="3-ユーザー作成">3. ユーザー作成</span></h3><p>コマンドプロンプトもしくは power shell で以下のコマンドを実行していきます。</p><p>Oracle 21c XEに接続</p><pre><code>sqlplus / as sysdba</code></pre><p>接続先を確認</p><pre><code>SQL&gt; show con_name↓CON_NAME------------------------------CDB$ROOT</code></pre><p>コンテナデータベース（CDB）に接続されているため、プラガブルデータベース（PDB）に接続を切り替えます。</p><p>存在するプラガブルデータベースを確認します。</p><pre><code>SQL&gt; show pdbs↓    CON_ID CON_NAME                       OPEN MODE  RESTRICTED---------- ------------------------------ ---------- ----------         2 PDB$SEED                       READ ONLY  NO         3 XEPDB1                         READ WRITE NO</code></pre><p>既に存在する「XEPDB1」を利用する事とします。</p><pre><code>SQL&gt; ALTER SESSION SET CONTAINER=XEPDB1;↓セッションが変更されました。</code></pre><pre><code>SQL&gt; show con_name↓CON_NAME------------------------------XEPDB1</code></pre><p>「XEPDB1」に接続しました。</p><p>続いてユーザーを作成します。</p><ul><li>ユーザー: atman</li><li>パスワード: atman</li></ul><p>プロファイルは「DEFAULT」を設定してパスワード期限を無期限にします。</p><pre><code>SQL &gt; CREATE USER atman IDENTIFIED BY atman;GRANT CONNECT, RESOURCE TO atman;ALTER USER atman QUOTA UNLIMITED ON users;ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</code></pre><p>プロファイルを確認してみます。</p><pre><code>SQL &gt;select username, profile from dba_userswhere username = &#39;ATMAN&#39;;</code></pre><p>プロファイルは「DEFAULT」となっていました。</p><pre><code>SQL &gt;SELECT * FROM DBA_PROFILESWHERE RESOURCE_NAME = &#39;PASSWORD_LIFE_TIME&#39;;</code></pre><p>プロファイルDEFAULTのパスワードが無期限となっていることを確認します。</p><p>これでユーザー作成は完了です。</p><p>補足ですが、表領域は下記になっています。</p><ul><li>表領域: USERS</li><li>一時表領域: TEMP</li></ul><p>確認用のSQLです。</p><pre><code>SELECT username,default_tablespace,temporary_tablespace FROM DBA_USERS WHERE username=&#39;ATMAN&#39;;</code></pre><h3><span id="4-tnsnamesora-編集">4. tnsnames.ora 編集</span></h3><p>最後に、今回利用したプラガブルデータベースに接続するために、tnsnames.oraを編集します。</p><hr><p>【補足】<br>tnsnames.ora の保存場所を確認する方法です。</p><p>コマンドプロンプトを開いて、<strong>tnsping をわざと失敗</strong>させます。<br>例えば <code>tnsping aaa</code>と実行します。（aaaは仮。存在しないTNS名でなければ何でもOK）</p><pre><code>C:\Repos\computing-atman&gt; tnsping aaa↓TNS Ping Utility for 64-bit Windows: Version 21.0.0.0.0 - Production on 11-3月 -2023 22:52:44Copyright (c) 1997, 2021, Oracle.  All rights reserved.パラメータ・ファイルを使用しました:C:\oracle\product\21c\homes\OraDB21Home1\network\admin\sqlnet.oraTNS-03505: 名前の解決に失敗しました。</code></pre><p>上記の<strong>sqlnet.oraファイルの保存ディレクトリに、tnsping.oraも保存</strong>されています。</p><hr><p>tnsnames.oraの最後に、以下の記述を追加します。</p><pre><code>XEPDB1=(DESCRIPTION=  (LOAD_BALANCE=off)   (ADDRESS=    (PROTOCOL=tcp)      (HOST=localhost)      (PORT=1521)  )   (CONNECT_DATA=    (SERVICE_NAME=XEPDB1)     (FAILOVER_MODE=      (TYPE=select)       (METHOD=basic)    )  ))</code></pre><p>コマンドプロンプトで、tnspingで接続確認します。</p><pre><code>tnsping XEPDB1</code></pre><p>OKと表示されれば、問題無しで完了です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows PCに、「Oracle Database 21c Express Edition (XE)」をインストールして利用する方法を記しておきます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#oracle</summary>
      
    
    
    
    <category term="Oracle" scheme="https://www.computing-atman.com/categories/Oracle/"/>
    
    
    <category term="Oracle" scheme="https://www.computing-atman.com/tags/Oracle/"/>
    
    <category term="DB" scheme="https://www.computing-atman.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>【C#】Prism Xamarin Forms 「参照アセンブリが見つかりません」 対処</title>
    <link href="https://www.computing-atman.com/2023/03/11/33-prism-xamarin-form-uwp-assembly-error-cs/"/>
    <id>https://www.computing-atman.com/2023/03/11/33-prism-xamarin-form-uwp-assembly-error-cs/</id>
    <published>2023-03-11T11:36:03.000Z</published>
    <updated>2023-03-11T12:17:37.572Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studioで、Prismの「Xamarin Forms」を利用していた際、UWPプロジェクトのビルドが通らなくてエラーが発生していました。</p><p>対処方法を残しておきます。</p><h2><span id="現象">現象</span></h2><p>環境は以下</p><ul><li>Windows 10</li><li>Visual Studio 2022</li><li>Prism Template Pack インストール済み</li></ul><p>エラーメッセージはこちらです。</p><img src="/2023/03/11/33-prism-xamarin-form-uwp-assembly-error-cs/1.png" class><blockquote><p>.NETCore,Version&#x3D;v5.0 の参照アセンブリが見つかりませんでした。この問題を解決するには、このフレームワーク バージョンの Developer Pack (SDK&#x2F;Targeting Pack) をインストールするか、アプリケーションのターゲットを再設定してください。<a href="https://aka.ms/msbuild/developerpacks">https://aka.ms/msbuild/developerpacks</a> で .NET Framework Developer Pack をダウンロードできます。</p></blockquote><h2><span id="対処">対処</span></h2><p>Visual Studio インストーラーから、<strong>ユニバーサル Windows プラットフォーム開発をインストール</strong>する必要があります。</p><img src="/2023/03/11/33-prism-xamarin-form-uwp-assembly-error-cs/3.png" class><p>検証できていませんが、合わせて「.NET マルチプラットフォーム アプリの UI開発」も必要かもしれません。（今回のエラーが発生した際、マルチプラットフォームUI開発は既にインストール済みだったため）</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Visual Studioで、Prismの「Xamarin Forms」を利用していた際、UWPプロジェクトのビルドが通らなくてエラーが発生していました。&lt;/p&gt;
&lt;p&gt;対処方法を残しておきます。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;現象&quot;&gt;現象&lt;/span&gt;&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="Prism" scheme="https://www.computing-atman.com/tags/Prism/"/>
    
    <category term="Xamarin" scheme="https://www.computing-atman.com/tags/Xamarin/"/>
    
  </entry>
  
  <entry>
    <title>【C#】WPF Prism 画面遷移メモリ開放</title>
    <link href="https://www.computing-atman.com/2023/03/05/32-delete-view-instance-cash-wpf-prism-cs/"/>
    <id>https://www.computing-atman.com/2023/03/05/32-delete-view-instance-cash-wpf-prism-cs/</id>
    <published>2023-03-05T05:34:57.000Z</published>
    <updated>2023-03-05T12:38:42.500Z</updated>
    
    <content type="html"><![CDATA[<p>WPF Prism では、Regionという機能で画面遷移します。</p><p>ナビゲーションの画面遷移（画面の一部であるRegion部分が切り替わる処理）では、遷移先に INavigaitionAware インターフェースを実装します。</p><p>その際に生成される <u>IsNavigationTarget メソッド</u>は、ViewModelインスタンスを使い回すかどうかを 戻り値の bool で判断しますが、<strong>return false としてもメモリは開放されません</strong>。</p><br><p><u>【IsNavigationTargetの戻り値】</u></p><ul><li>true : インスタンスを使い回す。次回の画面起動時にコンストラクタが呼ばれない。</li><li>false: インスタンスを使い回さない。次回の画面起動時にコンストラクタが呼ばれる。ただし、<strong>メモリは開放されない</strong>。</li></ul><h2><span id="ナビゲーション画面遷移時にメモリを開放する方法">ナビゲーション画面遷移時にメモリを開放する方法</span></h2><p>ViewModelに<strong>IRegionMemberLifetimeインターフェースを実装</strong>し、<strong>KeepAliveプロパティの値をfalse</strong>にします。</p><p>また、<strong>INavigationAwareインターフェースも合わせて実装</strong>している場合、<strong>IsNavigationTarget は True</strong>にしておきます。</p><p>ViewModelへの実装例です。</p><p>▼SampleViewModel.cs</p><pre><code>public class SampleViewModel : BindableBase, INavigationAware, IRegionMemberLifetime&#123;    /// &lt;summary&gt;    /// ViewModel破棄に伴いメモリ開放する際はfalse    /// &lt;/summary&gt;    public bool KeepAlive &#123; get; set; &#125; = false;    public SampleViewModel()    &#123;    &#125;    public bool IsNavigationTarget(NavigationContext navigationContext)    &#123;        //// RegionMemberLifetime(KeepAlive = false)でViewModelを破棄するため、こちらはTrue        return true;    &#125;    public virtual void OnNavigatedFrom(NavigationContext navigationContext)    &#123;    &#125;    public virtual void OnNavigatedTo(NavigationContext navigationContext)    &#123;    &#125;&#125;</code></pre><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WPF Prism では、Regionという機能で画面遷移します。&lt;/p&gt;
&lt;p&gt;ナビゲーションの画面遷移（画面の一部であるRegion部分が切り替わる処理）では、遷移先に INavigaitionAware インターフェースを実装します。&lt;/p&gt;
&lt;p&gt;その際に生成される</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="WPF" scheme="https://www.computing-atman.com/tags/WPF/"/>
    
    <category term="Prism" scheme="https://www.computing-atman.com/tags/Prism/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】おすすめプラグイン</title>
    <link href="https://www.computing-atman.com/2023/03/05/31-recommended-plugins-hexo/"/>
    <id>https://www.computing-atman.com/2023/03/05/31-recommended-plugins-hexo/</id>
    <published>2023-03-05T04:31:20.000Z</published>
    <updated>2023-03-05T12:38:42.500Z</updated>
    
    <content type="html"><![CDATA[<p>Hexoのおすすめプラグインをまとめておきます。</p><h3><span id="ファイルの変更をブラウザに即時反映">ファイルの変更をブラウザに即時反映</span></h3><pre><code>npm install -g browser-syncnpm install hexo-browsersync --save</code></pre><h3><span id="github-page-にデプロイ">GitHub page にデプロイ</span></h3><pre><code>npm install hexo-deployer-git --save</code></pre><h3><span id="サイトマップ作成">サイトマップ作成</span></h3><pre><code>npm install hexo-generator-seo-friendly-sitemap --save</code></pre><p>_config.ymlに追記</p><p>▼Hexoディレクトリ\_config.yml（設定例）</p><pre><code>sitemap:  path: sitemap.xml  tag: true  category: true</code></pre><h3><span id="robotstxt生成">robots.txt生成</span></h3><pre><code>pm install hexo-generator-robotstxt --save</code></pre><p>▼Hexoディレクトリ\_config.yml（設定例）</p><pre><code>robotstxt:  useragent: &quot;*&quot;  disallow:    - /about/    - /gallery/    - /privacy-policy/    - /archives/    - /css/    - /img/    - /js/  allow:  sitemap: /sitemap.xml</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexoのおすすめプラグインをまとめておきます。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;ファイルの変更をブラウザに即時反映&quot;&gt;ファイルの変更をブラウザに即時反映&lt;/span&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;npm install -g browser-sync

npm in</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.computing-atman.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.computing-atman.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】マテリアル（material）テーマの適用・設定方法</title>
    <link href="https://www.computing-atman.com/2023/03/04/30-material-theme-hexo/"/>
    <id>https://www.computing-atman.com/2023/03/04/30-material-theme-hexo/</id>
    <published>2023-03-04T08:53:26.000Z</published>
    <updated>2023-03-11T01:32:03.721Z</updated>
    
    <content type="html"><![CDATA[<p>ブログをWordpressからHexoに変更し、material テーマを適用しました。<br>material テーマは、Gogleが推奨しているマテリアルデザインをベースとした美しいデザインです。</p><p>HexoはテーマをGithubからダウンロードして実装しますが、material テーマにはバグが残っており、そのまま利用する事が出来ませんでした。</p><p>今回、material テーマ適用に必要な修正版のテーマファイル提供と設定手順を記載しておきます。</p><!-- <img src="/2023/03/04/30-material-theme-hexo/1.png" class=""> --><hr><p>目次</p><!-- toc --><ul><li><a href="#%E5%89%8D%E6%8F%90">前提</a></li><li><a href="#hexo%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89">Hexo環境構築</a><ul><li><a href="#nodejs%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Node.jsをインストール</a></li><li><a href="#hexo%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Hexoをインストール</a></li><li><a href="#hexo%E3%81%AE%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89">Hexoの環境構築</a></li></ul></li><li><a href="#material-%E3%83%86%E3%83%BC%E3%83%9E%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89">material テーマ環境構築</a><ul><li><a href="#material-%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">material テーマをダウンロード</a></li><li><a href="#material-%E3%83%86%E3%83%BC%E3%83%9E%E3%82%92%E8%A8%AD%E5%AE%9A">material テーマを設定</a></li></ul></li><li><a href="#hexomaterial-%E3%81%AE-config-%E8%A8%AD%E5%AE%9A">Hexo&#x2F;material の config 設定</a><ul><li><a href="#%E8%A8%80%E8%AA%9E%E8%A8%AD%E5%AE%9A">言語設定</a></li><li><a href="#%E8%A8%98%E4%BA%8B%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E7%94%BB%E5%83%8F%E4%BF%9D%E5%AD%98%E7%94%A8%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80">記事に対応した画像保存用フォルダ</a></li><li><a href="#%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E7%94%BB%E5%83%8F">ブログのアイコン・画像</a></li><li><a href="#seo%E3%82%92%E6%9C%80%E9%81%A9%E5%8C%96">SEOを最適化</a></li><li><a href="#%E3%82%B9%E3%83%AD%E3%83%BC%E3%82%AC%E3%83%B3%E3%81%A8%E8%83%8C%E6%99%AF%E8%89%B2">スローガンと背景色</a></li><li><a href="#%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AEjavascript%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88">ページのJavaScriptエフェクト</a></li><li><a href="#%E6%8A%95%E7%A8%BF%E3%83%9A%E3%83%BC%E3%82%B8%E8%A6%81%E6%97%A8%E3%81%AE%E5%8D%98%E8%AA%9E%E6%95%B0">投稿ページ要旨の単語数</a></li><li><a href="#%E6%8A%95%E7%A8%BF%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%B5%E3%83%A0%E3%83%8D%E3%82%A4%E3%83%AB">投稿ページのサムネイル</a></li><li><a href="#%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88">フォント</a></li><li><a href="#%E3%82%B3%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E5%BC%B7%E8%AA%BF%E8%A1%A8%E7%A4%BA">コードブロックの強調表示</a></li><li><a href="#sns%E8%A8%AD%E5%AE%9A">SNS設定</a></li><li><a href="#%E3%82%B5%E3%82%A4%E3%83%89%E3%83%90%E3%83%BC%E8%A8%AD%E5%AE%9A">サイドバー設定</a></li><li><a href="#%E3%82%BF%E3%82%B0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90">タグページ作成</a></li><li><a href="#%E3%83%AA%E3%83%B3%E3%82%AF%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90">リンクページ作成</a></li><li><a href="#%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90">問い合わせページ作成</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="前提">前提</span></h2><ul><li>OS:Windows</li></ul><h2><span id="hexo環境構築">Hexo環境構築</span></h2><h3><span id="nodejsをインストール">Node.jsをインストール</span></h3><p>Hexoをインストールするための <strong>npmコマンド</strong> を使えるようにする必要があります。<br>そのために、まずはNode.jsをインストールします。</p><p>下記リンク先から <strong>Node.jsをダウンロード</strong> して下さい。</p><p><a href="https://nodejs.org/ja/">https://nodejs.org/ja/</a></p><p>次に、ダウンロードした<strong>Windows Installer(.msi)をダブルクリックしてインストール</strong>します。</p><h3><span id="hexoをインストール">Hexoをインストール</span></h3><p>コマンドプロンプトで以下を実行します。</p><pre><code>npm install hexo-cli -g</code></pre><p>これで、<strong>Hexoのインストール完了</strong>です。</p><h3><span id="hexoの環境構築">Hexoの環境構築</span></h3><p>Hexo用のディレクトリ（フォルダ）を準備します。<br>例として<code>「C:\hexo-blog」</code>をHexo用ディレクトリとします。</p><p>コマンドプロンプトで<code>init</code>を実行し、サイト用のフォルダを生成します。</p><pre><code>npx hexo init Hexo用ディレクトリ例）npx hexo init C:\hexo-blog</code></pre><p><code>cd Hexo用ディレクトリ</code>で移動し、</p><pre><code>npm install</code></pre><p>Hexoブログ用の各種ディレクトリが生成されていれば完了です。</p><h2><span id="material-テーマ環境構築">material テーマ環境構築</span></h2><h3><span id="material-テーマをダウンロード">material テーマをダウンロード</span></h3><p><a href="https://github.com/iblh/hexo-theme-material">オリジナル</a>はバグが残っていますので、修正版をダウンロードして下さい。</p><p>↓修正版<br><a href="https://github.com/atman-33/hexo-theme-material">https://github.com/atman-33/hexo-theme-material</a></p><p>Code &gt; Download ZIP でzipファイルをダウンロードします。</p><img src="/2023/03/04/30-material-theme-hexo/2.png" class><p>ダウンロードが完了すれば、zipを解凍し、中身をHexo用ディレクトリ直下の<strong>themes&#x2F;materialフォルダ</strong>に格納します。</p><pre><code>Hexo用ディレクトリ\|-themes\   |-material\      ↑この中にzipファイルの中身が保存されていればOK</code></pre><img src="/2023/03/04/30-material-theme-hexo/3.png" class><h3><span id="material-テーマを設定">material テーマを設定</span></h3><p>次に、material テーマ を読み込むように修正します。<br>Hexo用ディレクトリ内の「_config.yml」を テキストエディタ で開き、theme を material に変更します。</p><p>▼Hexo用ディレクトリ&#x2F;_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/4.png" class><p>この時点でHexoブログをローカルサーバーで確認可能です。<br>確認するには、コマンドプロンプトで以下を実行します。</p><pre><code>cd Hexo用ディレクトリhexo server -g</code></pre><p>ブラウザでURLに<code>「http://localhost:4000」</code>を入力すれば、Hexoブログを確認できます。</p><h2><span id="hexox2fmaterial-の-config-設定">Hexo&#x2F;material の config 設定</span></h2><p>Hexo 及び material テーマは初期設定のままでは扱い辛いため、設定を変更します。</p><p>Hexo用ディレクトリ内には、2つの_config.ymlファイルが存在します。<br>説明時にどちらの_config.ymlを示しているのか明確にするため、ここからは以下の名称で記載する事とします。</p><ul><li>①ルート_config.yml</li><li>②テーマ_config.yml</li></ul><pre><code>Hexo用ディレクトリ\|-_config.ml・・・①ルート_config.yml|-themes\   |-material      |-_config.yml・・・②テーマ_config.yml</code></pre><h3><span id="言語設定">言語設定</span></h3><p>Hexo用ディレクトリから、テキストエディタで ルート_config.yml ファイルの language プロパティを設定します。</p><p>▼ルート_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/5.png" class><p>language を ja にして、日本語にします。</p><h3><span id="記事に対応した画像保存用フォルダ">記事に対応した画像保存用フォルダ</span></h3><p>ルート_config.yml の post_asset_folder の値を変更しておきます。</p><p><code>post_asset_folder: </code><strong><code>true</code></strong></p><p>post_asset_folder の値を true にすると、_postフォルダ直下に新規記事作成時に記事に対応したフォルダが自動的に生成されます。<br>記事で使用する画像を、そのフォルダに保存しておけば、記事中に参照する事が可能です。</p><p>▼記事内でassetフォルダの画像を読み込む場合の記述</p><pre><code>&#123;% asset_img 画像ファイル名.jpg %&#125;</code></pre><h3><span id="ブログのアイコン画像">ブログのアイコン・画像</span></h3><p>ここからは、テーマ_configy.ymlを設定していきます。<br>ブログのアイコンや画像は以下の部分で設定しています。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/6.png" class><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/7.png" class><p>参照元の画像ファイル置場は下記にありますので、必要に応じて修正します。<br><strong><code>Hexo用\themes\material\source\img</code></strong></p><h3><span id="seoを最適化">SEOを最適化</span></h3><p>この設定を有効にすると、構造化データがページのヘッダーに生成され、Google などの検索エンジンの SEO を改善するのに役立ちます。<br>ただし、<code>hexo g</code> に 問題がある場合は <code>false</code> に設定してみてください。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/8.png" class><h3><span id="スローガンと背景色">スローガンと背景色</span></h3><p>スローガン（トップページの概要文）と背景色は下記から設定します。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/9.png" class><h3><span id="ページのjavascriptエフェクト">ページのJavaScriptエフェクト</span></h3><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/10.png" class><h3><span id="投稿ページ要旨の単語数">投稿ページ要旨の単語数</span></h3><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/11.png" class><h3><span id="投稿ページのサムネイル">投稿ページのサムネイル</span></h3><p>material テーマは 19 枚のシンプルな画像が準備されています。投稿ページにサムネイルが定義されていない場合、テーマはランダムフォルダ（ディレクトリ\themes\material\source\img\random）からランダムに写真を選択します。</p><p>ランダムに表示する画像数は下記から設定します。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/12.png" class><p>投稿ページにサムネイルを設定する場合は、投稿ページのmdファイルの上部に<strong>thumbnail</strong>を設定すればOKです。<br>サンプルは下記となります。</p><p>▼投稿ページのファイル.md</p><img src="/2023/03/04/30-material-theme-hexo/13.png" class><p>上記の例では、「Hexo用ディレクトリ\themes\material\source\img\thumbnails」フォルダを作成し、そこに保存したファイルをサムネイルとして利用しています。</p><h3><span id="フォント">フォント</span></h3><p>フォントは、初期設定だと日本語の見栄えが良くなかったため、下記のように変更しました。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/14.png" class><h3><span id="コードブロックの強調表示">コードブロックの強調表示</span></h3><p>material テーマは、2 種類のコードの強調表示を提供しています。</p><ul><li>prettify</li><li>hanabi</li></ul><p>上記を有効にするには、ルート_config.yml 内のコードの強調表示をオフにする必要があります。（そうしなければ競合してしまいます。）</p><p>以下は、habani の設定例です。</p><p>▼ルート_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/15.png" class><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/16.png" class><p>hanabi 表示効果のサンプルを載せてきます。</p><img src="/2023/03/04/30-material-theme-hexo/17.png" class><h3><span id="sns設定">SNS設定</span></h3><p>必要無いリンクは空白でOKです。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/18.png" class><h3><span id="サイドバー設定">サイドバー設定</span></h3><p>サイドバーをカスタマイズします。</p><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/19.png" class><p>この設定の場合、下記のように表示されます。</p><img src="/2023/03/04/30-material-theme-hexo/20.png" class><p>アイコンは、<u>Google の Material Icon</u> を利用しています。<br>　↓<br><a href="https://fonts.google.com/icons?icon.set=Material+Icons">https://fonts.google.com/icons?icon.set=Material+Icons</a></p><p>利用したいアイコンを見つけて、サイドバーの「icon: <strong>ココ</strong>」に設定して下さい。</p><p><strong>※Google の material icon が全て利用できるわけではなく、表示が反映されないアイコンもあります</strong>のでご注意下さい。理由は不明です。</p><p>サイドバーの「タグ」・「リンク」・「問い合わせ」は専用のページを作成する必要があります。方法は後述します。</p><h3><span id="タグページ作成">タグページ作成</span></h3><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/21.png" class><p>コマンドプロンプトを開き、Hexo用ディレクトリに移動して、以下のように入力します。</p><p>▼コマンドプロンプト</p><pre><code>cd Hexo用ディレクトリhexo new page &quot;tags&quot;</code></pre><p><code>Hexo用ディレクトリ\source\tags</code> フォルダ内の <code>index.md</code> ファイルを、以下のように編集します。</p><p>▼Hexo用ディレクトリ\source\tags\index.md</p><pre><code>---title: tagsdate: 2023-02-26 15:50:54layout: tags---</code></pre><p><strong><code>layout: tags</code> が必須</strong>です。</p><h3><span id="リンクページ作成">リンクページ作成</span></h3><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/22.png" class><p>コマンドプロンプトを開き、Hexo用ディレクトリに移動して、以下のように入力します。</p><p>▼コマンドプロンプト</p><pre><code>cd Hexo用ディレクトリhexo new page &quot;links&quot;</code></pre><p><code>Hexo用ディレクトリ\source\links</code> フォルダ内の <code>index.md</code> ファイルを、以下のように編集します。</p><p>▼Hexo用ディレクトリ\source\links\index.md</p><pre><code>---title: linksdate: 2023-02-27 18:03:34layout: links---</code></pre><p><strong><code>layout: links</code> が必須</strong>です。</p><p>また、<code>Hexo用ディレクトリ\source</code> フォルダ内に「<strong>_data</strong>」フォルダ を作成し、その直下に「<strong>links.yml</strong>」ファイルを作成して編集します。</p><p>編集内容のサンプルは下記となります。リンクを複数に増やす場合は、続けて記載していけばOKです。</p><p>▼Hexo用ディレクトリ\source\_data\links.yml</p><pre><code>Github atman-33:     link: https://github.com/atman-33    avatar: https://avatars.githubusercontent.com/u/41929192?v=4    descr: &quot;Github トップページ&quot;Google Material Icons:     link: https://fonts.google.com/icons?icon.set=Material+Icons    avatar: https://www.gstatic.com/images/icons/material/apps/fonts/1x/catalog/v5/favicon.svg    descr: &quot;Google マテリアルアイコン&quot;</code></pre><h3><span id="問い合わせページ作成">問い合わせページ作成</span></h3><p>▼テーマ_config.yml</p><img src="/2023/03/04/30-material-theme-hexo/23.png" class><p>コマンドプロンプトを開き、Hexo用ディレクトリに移動して、以下のように入力します。</p><p>▼コマンドプロンプト</p><pre><code>cd Hexo用ディレクトリhexo new page &quot;about&quot;</code></pre><p><code>Hexo用ディレクトリ\source\about</code> フォルダ内の <code>index.md</code> ファイルを編集します。</p><p>▼Hexo用ディレクトリ\source\about\index.md</p><pre><code>---title: 問い合わせdate: 2023-02-27 18:14:12---ご閲覧頂きありがとうございます。質問・要望などありましたら、Twitterで連絡ください。※ここにTwitterのURLなど</code></pre><p>このページは、通常の固定ページです。<br>そこにTwitterなどのURLを掲載すれば、問合せ先として利用可能です。</p><hr><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ブログをWordpressからHexoに変更し、material テーマを適用しました。&lt;br&gt;material テーマは、Gogleが推奨しているマテリアルデザインをベースとした美しいデザインです。&lt;/p&gt;
&lt;p&gt;HexoはテーマをGithubからダウンロードして実装しま</summary>
      
    
    
    
    <category term="Hexo" scheme="https://www.computing-atman.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.computing-atman.com/tags/Hexo/"/>
    
    <category term="マテリアルデザイン" scheme="https://www.computing-atman.com/tags/%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【C#】WPF Prism DataGrid ドラッグ&amp;ドロップで並び替え</title>
    <link href="https://www.computing-atman.com/2023/03/02/29-datagrid-drag-and-drop-to-sort-wpf-cs/"/>
    <id>https://www.computing-atman.com/2023/03/02/29-datagrid-drag-and-drop-to-sort-wpf-cs/</id>
    <published>2023-03-02T14:11:39.000Z</published>
    <updated>2023-03-05T12:38:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>C#の <strong>WPF</strong> で、DataGridのレコードをドラッグ&amp;ドロップで並び替える処理を説明します。</p><img src="/2023/03/02/29-datagrid-drag-and-drop-to-sort-wpf-cs/1.gif" class><hr><p>目次</p><!-- toc --><ul><li><a href="#%E5%AF%BE%E8%B1%A1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B">対象ファイル（例）</a></li><li><a href="#bindingdragdroprowbehaviorcs-a">BindingDragDropRowBehavior.cs ･･･A</a><ul><li><a href="#1datagrip%E3%81%AE%E8%A1%8C%E3%82%92%E3%83%89%E3%83%A9%E3%83%83%E3%82%B0%E3%83%89%E3%83%AD%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%83%93%E3%83%98%E3%82%A4%E3%83%93%E3%82%A2%E3%82%92%E6%BA%96%E5%82%99">①DataGripの行をドラッグ&amp;ドロップするビヘイビアを準備</a></li></ul></li><li><a href="#sampleviewxaml-b">SampleView.xaml ･･･B</a><ul><li><a href="#2view%E3%81%AB-bindingdragdroprowbehavior%E3%81%AE%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0">②Viewに、BindingDragDropRowBehaviorの参照を追加</a></li><li><a href="#3datagrid%E3%81%AB-bindingdragdroprowbehavior-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0">③DataGridに、 BindingDragDropRowBehavior の設定を追加</a></li><li><a href="#4datagrid%E3%83%89%E3%83%A9%E3%83%83%E3%82%B0%E3%83%89%E3%83%AD%E3%83%83%E3%83%97%E6%99%82%E3%81%AE%E3%83%9D%E3%83%83%E3%83%97%E3%82%A2%E3%83%83%E3%83%97%E8%A1%A8%E7%A4%BA%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0">④DataGridドラッグ＆ドロップ時のポップアップ表示設定を追加</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="対象ファイル例">対象ファイル（例）</span></h2><p>コーディングが必要なファイルは下記の <strong>A～B</strong> です。</p><pre><code>Services/ |-BindingDragDropRowBehavior.cs ･･･AViews/ |-SampleView.xaml ･･･B</code></pre><h2><span id="bindingdragdroprowbehaviorcs-a">BindingDragDropRowBehavior.cs ･･･A</span></h2><h3><span id="1datagripの行をドラッグampドロップするビヘイビアを準備">①DataGripの行をドラッグ&amp;ドロップするビヘイビアを準備</span></h3><p>DataGripの行をドラッグ&amp;ドロップするビヘイビアを準備します。コードは下記となります。<br>namespaece は、適宜変更して下さい。</p><p>▼BindingDragDropRowBehavior.cs</p><pre><code>using System;using System.Windows;using System.Windows.Controls;using System.Windows.Controls.Primitives;using System.Windows.Input;using System.Collections;using System.Windows.Data;using System.Windows.Media;namespace Template2.WPF.Services&#123;    /// &lt;summary&gt;    /// DataGridの行をドラッグ&amp;ドロップで並び変えるビヘイビア    /// 複雑なDataGrid構造には対応していないため注意    ///    /// 　利用可能なDataGridの例    /// 　・自動列生成のみ    /// 　・DataGridTextColumnのみ    /// &lt;/summary&gt;    public static class BindingDragDropRowBehavior    &#123;        private static DataGrid dataGrid;        private static Popup popup;        private static bool enable;        private static object draggedItem;        public static object DraggedItem        &#123;            get &#123; return BindingDragDropRowBehavior.draggedItem; &#125;            set &#123; BindingDragDropRowBehavior.draggedItem = value; &#125;        &#125;        public static Popup GetPopupControl(DependencyObject obj)        &#123;            return (Popup)obj.GetValue(PopupControlProperty);        &#125;        public static void SetPopupControl(DependencyObject obj, Popup value)        &#123;            obj.SetValue(PopupControlProperty, value);        &#125;        // Using a DependencyProperty as the backing store for PopupControl.  This enables animation, styling, binding, etc...        public static readonly DependencyProperty PopupControlProperty =            DependencyProperty.RegisterAttached(&quot;PopupControl&quot;, typeof(Popup), typeof(BindingDragDropRowBehavior), new UIPropertyMetadata(null, OnPopupControlChanged));        private static void OnPopupControlChanged(DependencyObject depObject, DependencyPropertyChangedEventArgs e)        &#123;            if (e.NewValue == null || !(e.NewValue is Popup))            &#123;                throw new ArgumentException(&quot;Popup Control should be set&quot;, &quot;PopupControl&quot;);            &#125;            popup = e.NewValue as Popup;            dataGrid = depObject as DataGrid;            // Check if DataGrid            if (dataGrid == null)                return;            if (enable &amp;&amp; popup != null)            &#123;                dataGrid.BeginningEdit += new EventHandler&lt;DataGridBeginningEditEventArgs&gt;(OnBeginEdit);                dataGrid.CellEditEnding += new EventHandler&lt;DataGridCellEditEndingEventArgs&gt;(OnEndEdit);                dataGrid.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(OnMouseLeftButtonUp);                dataGrid.PreviewMouseLeftButtonDown += new MouseButtonEventHandler(OnMouseLeftButtonDown);                dataGrid.MouseMove += new MouseEventHandler(OnMouseMove);            &#125;            else            &#123;                dataGrid.BeginningEdit -= new EventHandler&lt;DataGridBeginningEditEventArgs&gt;(OnBeginEdit);                dataGrid.CellEditEnding -= new EventHandler&lt;DataGridCellEditEndingEventArgs&gt;(OnEndEdit);                dataGrid.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(OnMouseLeftButtonUp);                dataGrid.MouseLeftButtonDown -= new MouseButtonEventHandler(OnMouseLeftButtonDown);                dataGrid.MouseMove -= new MouseEventHandler(OnMouseMove);                dataGrid = null;                popup = null;                draggedItem = null;                IsEditing = false;                IsDragging = false;            &#125;        &#125;        public static bool GetEnabled(DependencyObject obj)        &#123;            return (bool)obj.GetValue(EnabledProperty);        &#125;        public static void SetEnabled(DependencyObject obj, bool value)        &#123;            obj.SetValue(EnabledProperty, value);        &#125;        // Using a DependencyProperty as the backing store for Enabled.  This enables animation, styling, binding, etc...        public static readonly DependencyProperty EnabledProperty =            DependencyProperty.RegisterAttached(&quot;Enabled&quot;, typeof(bool), typeof(BindingDragDropRowBehavior), new UIPropertyMetadata(false, OnEnabledChanged));        private static void OnEnabledChanged(DependencyObject depObject, DependencyPropertyChangedEventArgs e)        &#123;            //Check if value is a Boolean Type            if (e.NewValue is bool == false)                throw new ArgumentException(&quot;Value should be of bool type&quot;, &quot;Enabled&quot;);            enable = (bool)e.NewValue;        &#125;        public static bool IsEditing &#123; get; set; &#125;        public static bool IsDragging &#123; get; set; &#125;        private static void OnBeginEdit(object sender, DataGridBeginningEditEventArgs e)        &#123;            IsEditing = true;            //in case we are in the middle of a drag/drop operation, cancel it...            if (IsDragging) ResetDragDrop();        &#125;        private static void OnEndEdit(object sender, DataGridCellEditEndingEventArgs e)        &#123;            IsEditing = false;        &#125;        /// &lt;summary&gt;        /// Initiates a drag action if the grid is not in edit mode.        /// &lt;/summary&gt;        private static void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)        &#123;            if (IsEditing) return;            var row = UIHelpers.TryFindFromPoint&lt;DataGridRow&gt;((UIElement)sender, e.GetPosition(dataGrid));            if (row == null || row.IsEditing) return;            //set flag that indicates we&#39;re capturing mouse movements            IsDragging = true;            DraggedItem = row.Item;        &#125;        /// &lt;summary&gt;        /// Completes a drag/drop operation.        /// &lt;/summary&gt;        private static void OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)        &#123;            if (!IsDragging || IsEditing)            &#123;                return;            &#125;            //get the target item            var targetItem = dataGrid.SelectedItem;            if (targetItem == null || !ReferenceEquals(DraggedItem, targetItem))            &#123;                //get target index                var targetIndex = ((dataGrid).ItemsSource as IList).IndexOf(targetItem);                //remove the source from the list                ((dataGrid).ItemsSource as IList).Remove(DraggedItem);                //move source at the target&#39;s location                ((dataGrid).ItemsSource as IList).Insert(targetIndex, DraggedItem);                //select the dropped item                dataGrid.SelectedItem = DraggedItem;            &#125;            //reset            ResetDragDrop();        &#125;        /// &lt;summary&gt;        /// Closes the popup and resets the        /// grid to read-enabled mode.        /// &lt;/summary&gt;        private static void ResetDragDrop()        &#123;            IsDragging = false;            popup.IsOpen = false;            dataGrid.IsReadOnly = false;        &#125;        /// &lt;summary&gt;        /// Updates the popup&#39;s position in case of a drag/drop operation.        /// &lt;/summary&gt;        private static void OnMouseMove(object sender, MouseEventArgs e)        &#123;            if (!IsDragging || e.LeftButton != MouseButtonState.Pressed) return;            popup.DataContext = DraggedItem;            //display the popup if it hasn&#39;t been opened yet            if (!popup.IsOpen)            &#123;                //switch to read-only mode                dataGrid.IsReadOnly = true;                //make sure the popup is visible                popup.IsOpen = true;            &#125;            Size popupSize = new Size(popup.ActualWidth, popup.ActualHeight);            popup.PlacementRectangle = new Rect(e.GetPosition(dataGrid), popupSize);            //make sure the row under the grid is being selected            Point position = e.GetPosition(dataGrid);            var row = UIHelpers.TryFindFromPoint&lt;DataGridRow&gt;(dataGrid, position);            if (row != null) dataGrid.SelectedItem = row.Item;        &#125;    &#125;    public static class UIHelpers    &#123;        #region find parent        /// &lt;summary&gt;        /// Finds a parent of a given item on the visual tree.        /// &lt;/summary&gt;        /// &lt;typeparam name=&quot;T&quot;&gt;The type of the queried item.&lt;/typeparam&gt;        /// &lt;param name=&quot;child&quot;&gt;A direct or indirect child of the        /// queried item.&lt;/param&gt;        /// &lt;returns&gt;The first parent item that matches the submitted        /// type parameter. If not matching item can be found, a null        /// reference is being returned.&lt;/returns&gt;        public static T TryFindParent&lt;T&gt;(DependencyObject child)          where T : DependencyObject        &#123;            //get parent item            DependencyObject parentObject = GetParentObject(child);            //we&#39;ve reached the end of the tree            if (parentObject == null) return null;            //check if the parent matches the type we&#39;re looking for            T parent = parentObject as T;            if (parent != null)            &#123;                return parent;            &#125;            else            &#123;                //use recursion to proceed with next level                return TryFindParent&lt;T&gt;(parentObject);            &#125;        &#125;        /// &lt;summary&gt;        /// This method is an alternative to WPF&#39;s        /// &lt;see cref=&quot;VisualTreeHelper.GetParent&quot;/&gt; method, which also        /// supports content elements. Do note, that for content element,        /// this method falls back to the logical tree of the element.        /// &lt;/summary&gt;        /// &lt;param name=&quot;child&quot;&gt;The item to be processed.&lt;/param&gt;        /// &lt;returns&gt;The submitted item&#39;s parent, if available. Otherwise        /// null.&lt;/returns&gt;        public static DependencyObject GetParentObject(DependencyObject child)        &#123;            if (child == null) return null;            ContentElement contentElement = child as ContentElement;            if (contentElement != null)            &#123;                DependencyObject parent = ContentOperations.GetParent(contentElement);                if (parent != null) return parent;                FrameworkContentElement fce = contentElement as FrameworkContentElement;                return fce != null ? fce.Parent : null;            &#125;            //if it&#39;s not a ContentElement, rely on VisualTreeHelper            return VisualTreeHelper.GetParent(child);        &#125;        #endregion        #region update binding sources        /// &lt;summary&gt;        /// Recursively processes a given dependency object and all its        /// children, and updates sources of all objects that use a        /// binding expression on a given property.        /// &lt;/summary&gt;        /// &lt;param name=&quot;obj&quot;&gt;The dependency object that marks a starting        /// point. This could be a dialog window or a panel control that        /// hosts bound controls.&lt;/param&gt;        /// &lt;param name=&quot;properties&quot;&gt;The properties to be updated if        /// &lt;paramref name=&quot;obj&quot;/&gt; or one of its childs provide it along        /// with a binding expression.&lt;/param&gt;        public static void UpdateBindingSources(DependencyObject obj,                                  params DependencyProperty[] properties)        &#123;            foreach (DependencyProperty depProperty in properties)            &#123;                //check whether the submitted object provides a bound property                //that matches the property parameters                BindingExpression be = BindingOperations.GetBindingExpression(obj, depProperty);                if (be != null) be.UpdateSource();            &#125;            int count = VisualTreeHelper.GetChildrenCount(obj);            for (int i = 0; i &lt; count; i++)            &#123;                //process child items recursively                DependencyObject childObject = VisualTreeHelper.GetChild(obj, i);                UpdateBindingSources(childObject, properties);            &#125;        &#125;        #endregion        /// &lt;summary&gt;        /// Tries to locate a given item within the visual tree,        /// starting with the dependency object at a given position.         /// &lt;/summary&gt;        /// &lt;typeparam name=&quot;T&quot;&gt;The type of the element to be found        /// on the visual tree of the element at the given location.&lt;/typeparam&gt;        /// &lt;param name=&quot;reference&quot;&gt;The main element which is used to perform        /// hit testing.&lt;/param&gt;        /// &lt;param name=&quot;point&quot;&gt;The position to be evaluated on the origin.&lt;/param&gt;        public static T TryFindFromPoint&lt;T&gt;(UIElement reference, Point point)          where T : DependencyObject        &#123;            DependencyObject element = reference.InputHitTest(point)                                         as DependencyObject;            if (element == null) return null;            else if (element is T) return (T)element;            else return TryFindParent&lt;T&gt;(element);        &#125;    &#125;&#125;</code></pre><h2><span id="sampleviewxaml-b">SampleView.xaml ･･･B</span></h2><h3><span id="2viewに-bindingdragdroprowbehaviorの参照を追加">②Viewに、BindingDragDropRowBehaviorの参照を追加</span></h3><p>ドラッグ＆ドロップで並び替えをしたいDataGridに、 BindingDragDropBehavior を設定します。</p><p>そのために、まずはView（xaml）から BindingDragDropRowBehavior（正式にはnamespace）を参照可能とする設定を追加します。</p><p><strong><code>xmlns:services=&quot;clr-namespace:Template2.WPF.Services&quot;</code></strong></p><p>▼SampleView.xaml（SampleViewがUserControlの場合）</p><pre><code>&lt;UserControl x:Class=&quot;Template2.WPF.Views.SampleView&quot;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;             xmlns:prism=&quot;http://prismlibrary.com/&quot;                          prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;             xmlns:services=&quot;clr-namespace:Template2.WPF.Services&quot;&gt;    ･･･</code></pre><p>これで、SampleViewでは、servicesに格納されたクラス（BindingDragDropBehavior）が利用可能となります。</p><h3><span id="3datagridに-bindingdragdroprowbehavior-の設定を追加">③DataGridに、 BindingDragDropRowBehavior の設定を追加</span></h3><p>次に、DataGridに下記コードを追加します。<br><code>services:BindingDragDropRowBehavior</code>は、上記②が設定済みであれば参照可能です。</p><p>DataGdidに下記のプロパティを追加します。</p><pre><code>x:Name=&quot;WorkerGroupMstEntitiesName&quot;SelectionMode=&quot;Single&quot;services:BindingDragDropRowBehavior.Enabled=&quot;True&quot;services:BindingDragDropRowBehavior.PopupControl=&quot;&#123;Binding ElementName=DraggingPopup&#125;&quot;AllowDrop=&quot;True&quot;</code></pre><p>実際の実装例は下記となります。</p><p>▼SampleView.xaml（DataGridへの実装例）</p><pre><code>&lt;DataGrid Style=&quot;&#123;StaticResource commonDataGrid&#125;&quot;            ItemsSource=&quot;&#123;Binding WorkerGroupMstEntities&#125;&quot;            Cursor=&quot;Hand&quot;            Margin=&quot;5&quot;                        x:Name=&quot;WorkerGroupMstEntitiesName&quot;            SelectionMode=&quot;Single&quot;            services:BindingDragDropRowBehavior.Enabled=&quot;True&quot;            services:BindingDragDropRowBehavior.PopupControl=&quot;&#123;Binding ElementName=DraggingPopup&#125;&quot;            AllowDrop=&quot;True&quot;&gt;</code></pre><p>上記コードの<code>services:BindingDragDropRowBehavior.PopupControl=&quot;&#123;Binding ElementName=DraggingPopup&#125;</code>は、後述するポップアップ表示に必要となります。</p><h3><span id="4datagridドラッグドロップ時のポップアップ表示設定を追加">④DataGridドラッグ＆ドロップ時のポップアップ表示設定を追加</span></h3><p>ポップアップは、ドラッグ中にレコードのデータを表示する機能です。<br>選択、つまりドラッグしているレコードが分かり易くなります。</p><p>実装では、下記のように <strong>Popup</strong> を <strong>DataGrid の外側</strong> に配置します。</p><p>▼SampleView.xaml</p><pre><code>&lt;!-- DataGridをドラッグ＆ドロップした際のポップアップ表示 --&gt;&lt;Popup  x:Name=&quot;DraggingPopup&quot;        AllowsTransparency=&quot;True&quot;        IsHitTestVisible=&quot;False&quot;        Placement=&quot;RelativePoint&quot;        PlacementTarget=&quot;&#123;Binding ElementName=WorkerGroupMstEntitiesName&#125;&quot;&gt;    &lt;!--  Popup construction Use properties of DraggedObject inside for Binding  --&gt;    &lt;TextBlock Text=&quot;&#123;Binding Path=WorkerGroupName&#125;&quot;/&gt;&lt;/Popup&gt;&lt;DataGrid Style=&quot;&#123;StaticResource commonDataGrid&#125;&quot;            ItemsSource=&quot;&#123;Binding WorkerGroupMstEntities&#125;&quot;            Cursor=&quot;Hand&quot;            Margin=&quot;5&quot;                        x:Name=&quot;WorkerGroupMstEntitiesName&quot;            SelectionMode=&quot;Single&quot;            services:BindingDragDropRowBehavior.Enabled=&quot;True&quot;            services:BindingDragDropRowBehavior.PopupControl=&quot;&#123;Binding ElementName=DraggingPopup&#125;&quot;            AllowDrop=&quot;True&quot;&gt;    &lt;DataGrid.Columns&gt;        &lt;DataGridTextColumn Header=&quot;作業者グループコード&quot;                            Binding=&quot;&#123;Binding WorkerGroupCode&#125;&quot;                            IsReadOnly=&quot;True&quot;&gt;        &lt;/DataGridTextColumn&gt;        &lt;DataGridTextColumn Header=&quot;作業者グループ名称&quot;                            Binding=&quot;&#123;Binding WorkerGroupName&#125;&quot;                            MinWidth=&quot;400&quot;                            IsReadOnly=&quot;True&quot;&gt;        &lt;/DataGridTextColumn&gt;    &lt;/DataGrid.Columns&gt;&lt;/DataGrid&gt;</code></pre><p>Popup の<code>Name</code>は、DataGrid の<code>PopupControl</code>で設定した名称です。</p><p>▼<code>&lt;Popup&gt;</code>の中<br>x:Name&#x3D;”<strong>DraggingPopup</strong>“</p><p>が、</p><p>▼<code>&lt;DataGdid&gt;</code>の中<br>services:BindingDragDropRowBehavior.PopupControl&#x3D;”{Binding ElementName&#x3D;<strong>DraggingPopup</strong>}”</p><p>に対応しています。</p><p>また、ドラッグ時にPopup表示させるテキストは、下記の部分で設定しています。</p><p>▼<code>&lt;Popup&gt;</code>の中<br><code>&lt;TextBlock Text=&quot;&#123;Binding Path=WorkerGroupName&#125;&quot;/&gt;</code></p><p>上記の <strong>Popup テキストブロックの Binding Path で設定したプロパティ</strong>（上記の場合、WorkerGroupName）が<strong>ドラッグ時に表示</strong>されます。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#の &lt;strong&gt;WPF&lt;/strong&gt; で、DataGridのレコードをドラッグ&amp;amp;ドロップで並び替える処理を説明します。&lt;/p&gt;
&lt;img src=&quot;/2023/03/02/29-datagrid-drag-and-drop-to-sort-wpf-cs/</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="WPF" scheme="https://www.computing-atman.com/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>【C#】WPF Prism DataGrid ColumnのVisibilityをバインド</title>
    <link href="https://www.computing-atman.com/2023/02/27/28-bind-datagrid-column-visibility-wpf-prism-cs/"/>
    <id>https://www.computing-atman.com/2023/02/27/28-bind-datagrid-column-visibility-wpf-prism-cs/</id>
    <published>2023-02-27T06:46:02.000Z</published>
    <updated>2023-03-05T12:38:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>C#の <strong>WPF Prism</strong> でDataGridoカラムのVisibilityをバインドする方法を説明します。</p><p>例えば、DataGrid内のカラムに対してコンボボックス（の選択肢）をデータバインドさせる場合、RelativeSource FindAncestor を用いた方法が考えられます。<br>しかし、<strong>DataGridのカラムのVisibilityにデータバインドする場合、RelativeSourceを用いた方法は使えません</strong>。</p><p>そのため、ViewModelを参照可能とするクラスを作成して対応します。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E5%AF%BE%E8%B1%A1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B">対象ファイル（例）</a></li><li><a href="#bindingproxycs-a">BindingProxy.cs　･･･A</a></li><li><a href="#sampleviewxaml-b">SampleView.xaml ･･･B</a><ul><li><a href="#1view%E3%81%AExaml%E3%81%AB%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%82%AF%E3%83%A9%E3%82%B9%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0">①Viewのxamlにローカルクラス参照を追加</a></li><li><a href="#2datagrid%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%ABbindingproxy%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0">②DataGridのリソースにBindingProxy参照を追加</a></li><li><a href="#3datagrid%E3%82%AB%E3%83%A9%E3%83%A0%E3%81%AEvisibility%E3%82%92%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89">③DataGridカラムのVisibilityをバインド</a></li></ul></li><li><a href="#sampleviewmodelcs-c">SampleViewModel.cs ･･･C</a><ul><li><a href="#4viewmodel%E3%81%ABvisibility%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E7%94%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E6%BA%96%E5%82%99">④ViewModelにVisibilityバインド用プロパティを準備</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="対象ファイル例">対象ファイル（例）</span></h2><p>コーディングが必要なファイルは下記の <strong>A～C</strong> です。</p><pre><code>WPF/ |-Services/ |  |-BindingProxy.cs ･･･A | |-Views/ |  |-SampleView.xaml ･･･B   | |-ViewModels/ |  |-SampleViewModel.cs ･･･C  </code></pre><h2><span id="bindingproxycs-a">BindingProxy.cs　･･･A</span></h2><p>通常、ItemsSourceを使うとバインドしているコレクションの各要素がDataContextとなるため、<br>DataGrid内ではItemsSource以外のバインドが出来なくなります。</p><p>※DataContext：Bindingの対象</p><p>そこで、DataGrid内のコントロールを直接ViewModelのプロパティにアクセス可能とする<strong>「BindingProxy」</strong>クラスを準備します。</p><p>▼BindingProxy.cs</p><pre><code>using System.Windows;namespace Template2.WPF.Services&#123;    /// &lt;summary&gt;    /// ViewModelのバインディングソースの代理として働くクラスです。    /// &lt;/summary&gt;    public class BindingProxy : Freezable    &#123;        /// &lt;summary&gt;        /// Freezableオブジェクトのインスタンスを生成します。        /// &lt;/summary&gt;        /// &lt;returns&gt;&lt;/returns&gt;        protected override Freezable CreateInstanceCore()        &#123;            return new BindingProxy();        &#125;        /// &lt;summary&gt;        /// 間をとりもつプロパティ        /// データバインドした場合は、このプロパティがViewModelの代わりになる。        /// &lt;/summary&gt;        public object Data        &#123;            get &#123; return (object)GetValue(DataProperty); &#125;            set &#123; SetValue(DataProperty, value); &#125;        &#125;        /// &lt;summary&gt;        /// Data の依存関係プロパティ定義        /// &lt;/summary&gt;        public static readonly DependencyProperty DataProperty =            DependencyProperty.Register(&quot;Data&quot;, typeof(object), typeof(BindingProxy), new UIPropertyMetadata(null));    &#125;&#125;</code></pre><h2><span id="sampleviewxaml-b">SampleView.xaml ･･･B</span></h2><h3><span id="1viewのxamlにローカルクラス参照を追加">①Viewのxamlにローカルクラス参照を追加</span></h3><p>WindowもしくはUserControl要素に、BindingProxyクラスのnamespace参照を追加します。</p><p>例）BindingProxy.cs の namespace が、Template2.WPF.Services の場合<br><strong><code>xmlns:services=&quot;clr-namespace:Template2.WPF.Services&quot;</code></strong></p><p>▼SampleView.xaml</p><pre><code>&lt;UserControl x:Class=&quot;Template2.WPF.Views.Sample002View&quot;             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;             xmlns:prism=&quot;http://prismlibrary.com/&quot;                          prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;             xmlns:materialDesign=&quot;http://materialdesigninxaml.net/winfx/xaml/themes&quot;             xmlns:i=&quot;http://schemas.microsoft.com/xaml/behaviors&quot;             Background=&quot;&#123;StaticResource backgroundColor&#125;&quot;             xmlns:services=&quot;clr-namespace:Template2.WPF.Services&quot;             &gt;</code></pre><h3><span id="2datagridのリソースにbindingproxy参照を追加">②DataGridのリソースにBindingProxy参照を追加</span></h3><p>下記コードを追加してDataGrid内でBindingProxyを利用可能とします。</p><pre><code>&lt;DataGrid.Resources&gt;    &lt;!--DataGridのItemSourceとは別のアイテムをBindするために必要--&gt;    &lt;services:BindingProxy x:Key=&quot;Proxy&quot; Data=&quot;&#123;Binding&#125;&quot;/&gt;&lt;/DataGrid.Resources&gt;</code></pre><p>例）DataGridへの組込み例</p><p>▼SampleView.xaml</p><pre><code>&lt;DataGrid Style=&quot;&#123;StaticResource commonDataGrid&#125;&quot;          ItemsSource=&quot;&#123;Binding WorkerMstEntities&#125;&quot;          SelectedItem=&quot;&#123;Binding WorkerMstEntitiesSlectedItem&#125;&quot;          VerticalAlignment=&quot;Top&quot;          HorizontalAlignment=&quot;Left&quot;          IsReadOnly=&quot;False&quot;          CanUserAddRows=&quot;False&quot;          Cursor=&quot;Hand&quot;&gt;                &lt;DataGrid.Resources&gt;                    &lt;!--DataGridのItemSourceとは別のアイテムをBindするために必要--&gt;                    &lt;services:BindingProxy x:Key=&quot;Proxy&quot; Data=&quot;&#123;Binding&#125;&quot;/&gt;                &lt;/DataGrid.Resources&gt;                （省略）</code></pre><h3><span id="3datagridカラムのvisibilityをバインド">③DataGridカラムのVisibilityをバインド</span></h3><p>DataGridのColumn要素に、Visibilityを追加します。</p><p><strong>ポイント</strong></p><ul><li>Binding:Data.XXX を記載すること</li><li>Source:StaticResourceを記載すること</li></ul><p>▼SampleView.xaml</p><pre><code>&lt;DataGrid.Columns&gt;    &lt;!-- カラムのVisibilityは、BindingProxyクラスを利用してViewModelのプロパティを参照する必要有り --&gt;    &lt;materialDesign:DataGridTextColumn Header=&quot;作業者名称&quot;           Binding=&quot;&#123;Binding WorkerName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged&#125;&quot;           Visibility=&quot;&#123;Binding Data.WorkerNameVisibility, Source=&#123;StaticResource Proxy&#125;&#125;&quot;&gt;    （省略）</code></pre><h2><span id="sampleviewmodelcs-c">SampleViewModel.cs ･･･C</span></h2><h3><span id="4viewmodelにvisibilityバインド用プロパティを準備">④ViewModelにVisibilityバインド用プロパティを準備</span></h3><p>通常のWPF Prismでプロパティをデータバインドする方法と同様に、Visibilityをバインドした名称のプロパティとプライベート変数を追加します。</p><p>▼SampleViewModel.cs</p><pre><code>private Visibility _workerNameVisibility = Visibility.Visible;public Visibility WorkerNameVisibility&#123;    get &#123; return _workerNameVisibility; &#125;    set &#123; SetProperty(ref _workerNameVisibility, value); &#125;&#125;</code></pre><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#の &lt;strong&gt;WPF Prism&lt;/strong&gt; でDataGridoカラムのVisibilityをバインドする方法を説明します。&lt;/p&gt;
&lt;p&gt;例えば、DataGrid内のカラムに対してコンボボックス（の選択肢）をデータバインドさせる場合、RelativeSo</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="WPF" scheme="https://www.computing-atman.com/tags/WPF/"/>
    
    <category term="Prism" scheme="https://www.computing-atman.com/tags/Prism/"/>
    
  </entry>
  
  <entry>
    <title>【C#】WPF Prism 画面遷移（ダイアログ）</title>
    <link href="https://www.computing-atman.com/2023/02/27/27-dialog-wpf-prism-cs/"/>
    <id>https://www.computing-atman.com/2023/02/27/27-dialog-wpf-prism-cs/</id>
    <published>2023-02-27T06:12:16.000Z</published>
    <updated>2023-03-05T12:38:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>C#の <strong>WPF Prism</strong> でダイアログ画面（別ウィンドウ）を表示する方法について説明します。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E5%AF%BE%E8%B1%A1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B">対象ファイル（例）</a></li><li><a href="#mainwindowviewxaml%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%83-a">MainWindowView.xaml（画面遷移元）　･･･A</a><ul><li><a href="#1%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%ABcommand%E3%82%92%E8%BF%BD%E5%8A%A0">①ボタンにCommandを追加</a></li></ul></li><li><a href="#mainwindowviewmodelcs%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%83-b">MainWindowViewModel.cs（画面遷移元）　･･･B</a><ul><li><a href="#2viewmodel%E3%81%ABidialogservice%E3%81%AE%E5%A4%89%E6%95%B0%E3%82%92%E8%BF%BD%E5%8A%A0">②ViewModelにIDialogServiceの変数を追加</a></li><li><a href="#3%E3%83%9C%E3%82%BF%E3%83%B3%E6%8A%BC%E4%B8%8B%E6%99%82%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0">③ボタン押下時の実行メソッドを追加</a></li></ul></li><li><a href="#sampletableeditviewmodelcs%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%88-c">SampleTableEditViewModel.cs(画面遷移先)　･･･C</a><ul><li><a href="#4idialogaware%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E5%AE%9F%E8%A3%85">④IDialogAwareインターフェースを実装</a></li><li><a href="#5canclosedialog%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%A4%89%E6%9B%B4">⑤CanCloseDialogメソッドを変更</a></li></ul></li><li><a href="#appxamlcs-d">App.xaml.cs　･･･D</a><ul><li><a href="#6registertypes%E5%86%85%E3%81%A7view%E3%82%92%E7%99%BB%E9%8C%B2">⑥RegisterTypes内でViewを登録</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="対象ファイル例">対象ファイル（例）</span></h2><p>コーディングが必要なファイルは下記の <strong>A～D</strong> です。</p><pre><code>Views/ |-MainWindowView.xaml（画面遷移元）　･･･A |-SampleTableEditView.xaml(画面遷移先)ViewModels/ |-MainWindowViewModel.cs（画面遷移元）　･･･B |-SampleTableEditViewModel.cs(画面遷移先)　･･･C　App.xaml.cs　･･･D</code></pre><h2><span id="mainwindowviewxaml画面遷移元-a">MainWindowView.xaml（画面遷移元）　･･･A</span></h2><h3><span id="1ボタンにcommandを追加">①ボタンにCommandを追加</span></h3><p>画面遷移元のViewのボタンに対して、CommandにBindingでデリゲートコマンド名称を記載します。</p><pre><code>&lt;Button Content=&quot;SampleTable編集&quot;        FontSize=&quot;14&quot;        Margin=&quot;10&quot;        Padding=&quot;5&quot;        Command=&quot;&#123;Binding SampleTableEditViewButton&#125;&quot;/&gt;</code></pre><h2><span id="mainwindowviewmodelcs画面遷移元-b">MainWindowViewModel.cs（画面遷移元）　･･･B</span></h2><h3><span id="2viewmodelにidialogserviceの変数を追加">②ViewModelにIDialogServiceの変数を追加</span></h3><p>画面遷移元のViewModelに、IDialogServiceのプライベート変数を追加し、コンストラクタでセットします。</p><h3><span id="3ボタン押下時の実行メソッドを追加">③ボタン押下時の実行メソッドを追加</span></h3><p>ボタン押下イベントを受け取るデリゲートコマンドのプロパティを追加し、ボタン押下時のExcuteメソッドを実装します。</p><p>上記②～③のコード例は下記となります。</p><pre><code>//// コンストラクタpublic MainWindowViewModel(IDialogService dialogService)&#123;    //// 画面遷移用（ダイアログ）    _dialogService = dialogService;    SampleTableEditViewButton = new DelegateCommand(SampleTableEditViewButtonExecute);&#125;public DelegateCommand SampleTableEditViewButton &#123; get; &#125;private void SampleTableEditViewButtonExecute()&#123;    //// 画面遷移処理（ダイアログ）    _dialogService.ShowDialog(nameof(SampleTableEditView), null, null);&#125;</code></pre><h2><span id="sampletableeditviewmodelcs画面遷移先-c">SampleTableEditViewModel.cs(画面遷移先)　･･･C</span></h2><h3><span id="4idialogawareインターフェースを実装">④IDialogAwareインターフェースを実装</span></h3><p>画面遷移先のViewModelに、<strong>IDialogAwareインターフェース</strong> を実装します。</p><h3><span id="5canclosedialogメソッドを変更">⑤CanCloseDialogメソッドを変更</span></h3><p>IDialogAwareを実装した事で追加される CanCloseDialog() メソッドに、 retun true を記載します。<br>trueを返す事で、ダイアログを閉じる事が可能となります。</p><p>▼上記④～⑤のサンプルコード</p><pre><code>public class SampleTableEditViewModel : BindableBase, IDialogAware&#123;  //// 各種処理  public bool CanCloseDialog()  &#123;      return true;    //// true:画面を閉じる事が可能  &#125;&#125;</code></pre><h2><span id="appxamlcs-d">App.xaml.cs　･･･D</span></h2><h3><span id="6registertypes内でviewを登録">⑥RegisterTypes内でViewを登録</span></h3><pre><code>protected override void RegisterTypes(IContainerRegistry containerRegistry)&#123;    //// ダイアログ画面（別画面に表示） ※ViewModelにIDialogAware実装が必要    containerRegistry.RegisterDialog&lt;SampleTableEditView, SampleTableEditViewModel&gt;();&#125;</code></pre><p>containerRegistry.RegisterDialogに設定したViewがダイアログ表示可能となります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#の &lt;strong&gt;WPF Prism&lt;/strong&gt; でダイアログ画面（別ウィンドウ）を表示する方法について説明します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AF%BE%E8%B1%A1%E</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="WPF" scheme="https://www.computing-atman.com/tags/WPF/"/>
    
    <category term="Prism" scheme="https://www.computing-atman.com/tags/Prism/"/>
    
  </entry>
  
  <entry>
    <title>【C#】WPF Prism 画面遷移（ナビゲート）</title>
    <link href="https://www.computing-atman.com/2023/02/26/26-navigation-wpf-prism-cs/"/>
    <id>https://www.computing-atman.com/2023/02/26/26-navigation-wpf-prism-cs/</id>
    <published>2023-02-26T12:35:19.000Z</published>
    <updated>2023-03-05T12:38:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>C#の <strong>WPF Prism</strong> でナビゲート画面の遷移方法について説明します。</p><p>下記のように、ボタンを押すと画面が切り替わる処理です。<br>（ダイアログではなく、画面内の表示が切り替わります。）</p><img src="/2023/02/26/26-navigation-wpf-prism-cs/1.gif" class><hr><p>目次</p><!-- toc --><ul><li><a href="#%E5%AF%BE%E8%B1%A1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BE%8B">対象ファイル（例）</a></li><li><a href="#mainwindowviewxaml%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%83-a">MainWindowView.xaml（画面遷移元）　･･･A</a><ul><li><a href="#1%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%ABcommand%E3%82%92%E8%BF%BD%E5%8A%A0">①ボタンにCommandを追加</a></li></ul></li><li><a href="#mainwindowviewmodelcs%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%83-b">MainWindowViewModel.cs（画面遷移元）　･･･B</a><ul><li><a href="#2viewmodel%E3%81%ABiregionmanager%E3%81%AE%E5%A4%89%E6%95%B0%E3%82%92%E8%BF%BD%E5%8A%A0">②ViewModelにIRegionManagerの変数を追加</a></li><li><a href="#3%E3%83%9C%E3%82%BF%E3%83%B3%E6%8A%BC%E4%B8%8B%E6%99%82%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0">③ボタン押下時の実行メソッドを追加</a></li></ul></li><li><a href="#samplenavigationviewmodelcs%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E5%85%88-c">SampleNavigationViewModel.cs(画面遷移先)　･･･C</a><ul><li><a href="#4inavigationaware%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E5%AE%9F%E8%A3%85">④INavigationAwareインターフェースを実装</a></li><li><a href="#5%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%A4%89%E6%9B%B4">⑤インターフェースのメソッドを変更</a></li></ul></li><li><a href="#appxamlcs-d">App.xaml.cs　･･･D</a><ul><li><a href="#6registertypes%E5%86%85%E3%81%A7view%E3%82%92%E7%99%BB%E9%8C%B2">⑥RegisterTypes内でViewを登録</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="対象ファイル例">対象ファイル（例）</span></h2><p>コーディングが必要なファイルは下記の <strong>A～C</strong> です。</p><pre><code>Views/ |-MainWindowView.xaml（画面遷移元）　･･･A |-SampleNavigationView.xaml(画面遷移先)ViewModels/ |-MainWindowViewModel.cs（画面遷移元）　･･･B |-SampleNavigationViewModel.cs(画面遷移先)　･･･CApp.xaml.cs　･･･D</code></pre><h2><span id="mainwindowviewxaml画面遷移元-a">MainWindowView.xaml（画面遷移元）　･･･A</span></h2><h3><span id="1ボタンにcommandを追加">①ボタンにCommandを追加</span></h3><p>画面遷移元のViewのボタンに対して、CommandにBindingでデリゲートコマンド名称を記載します。</p><pre><code>&lt;Button Content=&quot;Sampleナビゲーション画面&quot;        FontSize=&quot;14&quot;        Margin=&quot;10&quot;        Padding=&quot;5&quot;        Command=&quot;&#123;Binding SampleNavigationViewButton&#125;&quot;/&gt;</code></pre><h2><span id="mainwindowviewmodelcs画面遷移元-b">MainWindowViewModel.cs（画面遷移元）　･･･B</span></h2><h3><span id="2viewmodelにiregionmanagerの変数を追加">②ViewModelにIRegionManagerの変数を追加</span></h3><p>画面遷移元のViewModelに、IRegionManagerのプライベート変数を追加し、コンストラクタでセットします。</p><h3><span id="3ボタン押下時の実行メソッドを追加">③ボタン押下時の実行メソッドを追加</span></h3><p>ボタン押下イベントを受け取るデリゲートコマンドのプロパティを追加し、ボタン押下時のExcuteメソッドを実装します。</p><p>▼上記②～③のサンプルコード</p><pre><code>private IRegionManager _regionManager;  //// 画面遷移（ナビゲーション）//// コンストラクタpublic MainWindowViewModel(IRegionManager regionManager)&#123;    //// 画面遷移用（ナビゲーション）    _regionManager = regionManager;    SampleNavigationViewButton = new DelegateCommand(SampleNavigationViewButtonExecute);&#125;public DelegateCommand SampleNavigationViewButton &#123; get; &#125;private void SampleNavigationViewButtonExecute()&#123;   //// 画面遷移処理（ナビゲーション）   _regionManager.RequestNavigate(&quot;ContentRegion&quot;, nameof(SampleNavigationView));&#125;</code></pre><h2><span id="samplenavigationviewmodelcs画面遷移先-c">SampleNavigationViewModel.cs(画面遷移先)　･･･C</span></h2><h3><span id="4inavigationawareインターフェースを実装">④INavigationAwareインターフェースを実装</span></h3><p>画面遷移先のViewModelに、<strong>INavigationAwareインターフェース</strong> と <strong>IRegionMemberLifetimeインターフェース</strong>を実装します。</p><p>※2023&#x2F;3&#x2F;5 追記<br>ViewModelインスタンスのメモリ開放のため、IRegionMemberLifetimeインターフェース実装を追加しました。</p><h3><span id="5インターフェースのメソッドを変更">⑤インターフェースのメソッドを変更</span></h3><p>INavigationAwareを実装した事で追加される IsNavigationTarget の 戻り値を true とし、KeepAlive を false にして下さい。そうすれば、画面破棄でメモリが開放されます。</p><p>▼上記④～⑤のサンプルコード</p><pre><code>public class SampleTableEditViewModel : BindableBase, INavigationAware, IRegionMemberLifetime&#123;    /// &lt;summary&gt;    /// ViewModel破棄に伴いメモリ開放する際はfalse    /// &lt;/summary&gt;    public bool KeepAlive &#123; get; set; &#125; = false;    //// 各種処理    public bool IsNavigationTarget(NavigationContext navigationContext)    &#123;        //// RegionMemberLifetime(KeepAlive = false)でViewModelを破棄するため、こちらはTrue        return true;    &#125;    public virtual void OnNavigatedFrom(NavigationContext navigationContext)    &#123;    &#125;    public virtual void OnNavigatedTo(NavigationContext navigationContext)    &#123;    &#125;&#125;</code></pre><h2><span id="appxamlcs-d">App.xaml.cs　･･･D</span></h2><h3><span id="6registertypes内でviewを登録">⑥RegisterTypes内でViewを登録</span></h3><pre><code>protected override void RegisterTypes(IContainerRegistry containerRegistry)&#123;    //// ナビゲーション画面    containerRegistry.RegisterForNavigation&lt;SampleNavigationView&gt;();&#125;</code></pre><p>containerRegistry.RegisterForNavigationに設定したViewが画面遷移可能となります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#の &lt;strong&gt;WPF Prism&lt;/strong&gt; でナビゲート画面の遷移方法について説明します。&lt;/p&gt;
&lt;p&gt;下記のように、ボタンを押すと画面が切り替わる処理です。&lt;br&gt;（ダイアログではなく、画面内の表示が切り替わります。）&lt;/p&gt;
&lt;img src=&quot;/2</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="WPF" scheme="https://www.computing-atman.com/tags/WPF/"/>
    
    <category term="Prism" scheme="https://www.computing-atman.com/tags/Prism/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】別Excelのデータ取得</title>
    <link href="https://www.computing-atman.com/2023/02/26/25-get-another-excel-data-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/25-get-another-excel-data-excel-vba/</id>
    <published>2023-02-26T11:40:23.000Z</published>
    <updated>2023-03-05T12:38:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>別のExcelファイルに記載されているデータを取得するマクロを製作しましたので紹介します。</p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/%E5%88%A5Excel%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%8F%96%E5%BE%97">【Excelダウンロードはこちら】</a></p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1excelextractor">①ExcelExtractor</a></li></ul></li><li><a href="#2modexcelextractor">②modExcelExtractor</a></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>Excelマクロを実行すると、指定した別Excelのデータを転記します。</p><img src="/2023/02/26/25-get-another-excel-data-excel-vba/01.png" class><hr><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります 。<br>（使用するモジュールのみ下記に記載）</p><pre><code>別Excelファイルのデータ取得.xlsm├標準モジュール|   ├modCmnFunction|   ├modExcelExtractor|クラスモジュール    ├ExcelExtractor</code></pre><hr><h2><span id="ソースコード解説">ソースコード解説</span></h2><hr><h3><span id="1excelextractor">①ExcelExtractor</span></h3><p>別Excelからデータを抽出する機能を持ったクラスです。<br>解説はコメントとして記載しています。</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; ExcelExtractor クラス&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; 【活用手順　例】&#39; ① インスタンス生成&#39; ② setFileSheet   ：データを読み込むExcel情報をインプット&#39; ②´（データ取得に時間が掛かる場合、ここで抽出元のExcelファイルを開いておく）&#39; ③ setDataRows    ：データを読み込む開始行から終了行を決定&#39; ④ setDataArray   ：特定の列に対するデータを一時的に格納&#39; ⑤ pasteData      ：指定したExcelファイルのセルに格納データを貼り付け&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; メンバ変数（Me.で参照可能とするためpublic）Public target As String         &#39; フォルダ名 + &quot;[&quot; + ファイル名 + &quot;]&quot; + シート名 + &quot;!&quot;Public dataFirstRow As Long     &#39; 抽出元のExcelデータが格納されている最初の行Public dataLastRow As Long      &#39; 抽出元のExcelデータが格納されている最後の行Private data() As Variant       &#39; 抽出元のExcelデータを格納する配列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : コンストラクタ&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub Class_Initialize()    ReDim data(0)End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : データを読み込む対象Excelのファイル名（フルパス）、シート名を設定&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub setFileSheet(filePath As String, sheetName As String)    Dim path As String, buf As String    &#39; ファイルが存在しなければ終了    If Dir(filePath) = &quot;&quot; Then        MsgBox (filePath &amp; &quot; が存在しません。&quot; &amp; Chr(13) _            &amp; &quot;フォルダ名とファイル名を確認して下さい。&quot;)        Exit Sub    End If    &#39; ファイル名に[]を付ける    path = Replace(filePath, Dir(filePath), &quot;[&quot; &amp; Dir(filePath) &amp; &quot;]&quot;)    Debug.Print path    &#39; 対象ワークシート名を取得    Me.target = &quot;&#39;&quot; &amp; path &amp; sheetName &amp; &quot;&#39;!&quot;    &#39; ワークシート名が正しいかどうか、まず読み込んでみる    On Error Resume Next    buf = ExecuteExcel4Macro(Me.target &amp; &quot;R1C1&quot;)    If Err &lt;&gt; 0 Then        MsgBox &quot;ワークシート [ &quot; &amp; sheetName &amp; &quot; ] を読めませんでした。&quot;, vbExclamation        Exit Sub    End If    On Error GoTo 0 &#39;// エラー処理の命令取り消し    Debug.Print targetEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : データが入っている開始行・終了行を特定&#39; note  : カラム名が存在するならば、データ検索開始行から下側に検索を進めて最終行を特定する。&#39;         ※下側への検索時、空白数が連続して設定数未満であれば検索を進める。&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub setDataRows(fieldName As String, fieldRow As Long, fieldCol As Long, dataFirstRow As Long, serchEndBlankCount As Long)    Dim i As Long    Dim buf As String    Dim blankCount As Long    &#39; カラム名が存在しなければ終了    If isExistedFieldName(fieldName, fieldRow, fieldCol) = False Then        MsgBox &quot;Excel台帳にカラム名 &quot; &amp; fieldName &amp; &quot; が存在しません。&quot;        End    End If    &#39; データの読み込み    i = 0    blankCount = 0    Do While blankCount &lt; serchEndBlankCount        &#39; データを読込        buf = ExecuteExcel4Macro(Me.target &amp; &quot;R&quot; &amp; dataFirstRow + i &amp; &quot;C&quot; &amp; fieldCol)        If buf = &quot;0&quot; Then blankCount = blankCount + 1 Else blankCount = 0    &#39; セルが空白ならブランクカウントに+1        i = i + 1    Loop    Me.dataFirstRow = dataFirstRow    Me.dataLastRow = dataFirstRow + i - blankCount - 1    If Me.dataLastRow &lt; Me.dataFirstRow Then Me.dataLastRow = Me.dataFirstRow    Debug.Print &quot;検索による　データ開始：&quot; &amp; Me.dataFirstRow &amp; &quot;　データ終了：&quot; &amp; Me.dataLastRowEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 指定したExceデータを配列に格納する。&#39; note  : 主に ① setDataArray ② pasteData をセットで使う。&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub setDataArray(fieldName As String, fieldRow As Long, fieldCol As Long)    Dim i As Long    Dim buf As String    &#39; カラム名が存在しなければ終了    If isExistedFieldName(fieldName, fieldRow, fieldCol) = False Then        MsgBox &quot;Excel台帳にカラム名 &quot; &amp; fieldName &amp; &quot; が存在しません。&quot;        ReDim data(0)        Exit Sub    End If    &#39; 格納データをクリア    Call clearData    &#39; データの読み込み    For i = Me.dataFirstRow To Me.dataLastRow        buf = ExecuteExcel4Macro(Me.target &amp; &quot;R&quot; &amp; i &amp; &quot;C&quot; &amp; fieldCol)        addData buf    NextEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 指定したExcelファイルの特定セルに格納していたデータをセット&#39; note  : 主に ① setDataArray ② pasteData をセットで使う。&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub pasteData(Workbook As Workbook, sheetName As String, row As Long, col As Long)    Dim i As Long    For i = 0 To countData        Workbook.Worksheets(sheetName).Cells(row + i, col) = getDataVal(i)        Debug.Print &quot;i：&quot; &amp; i &amp; &quot;　　行：&quot; &amp; row + i &amp; &quot;　　値：&quot; &amp; getDataVal(i)    NextEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 別Excelのカラム名が存在するか判定する関数&#39; note  : Excelの行列が変わっていないかどうかのチェック用&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function isExistedFieldName(fieldName As String, row As Long, col As Long) As Boolean    Dim buf As String    buf = ExecuteExcel4Macro(Me.target &amp; &quot;R&quot; &amp; row &amp; &quot;C&quot; &amp; col)    If InStr(buf, fieldName) &gt; 0 Then isExistedFieldName = True _        Else isExistedFieldName = FalseEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : データの値を配列に追加&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub addData(ByVal val)    On Error Resume Next    Dim i    i = countData    If (IsEmpty(data(i)) = True) Then        data(i) = val    Else        ReDim Preserve data(i + 1)        data(i + 1) = val    End IfEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 指定要素位置の値を取得する&#39; note  : JavaのArrayList.Getと一緒&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function getDataVal(index)    Dim v_ret As Variant    If (index &gt; countData) Then        v_ret = Null    Else        v_ret = data(index)    End If    getDataVal = v_retEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : データ配列の要素数を調べる。&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function countData() As Long    countData = UBound(data)End Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : データ配列をクリアする。&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub clearData()    ReDim data(0)End Sub</code></pre><hr><h2><span id="2modexcelextractor">②modExcelExtractor</span></h2><p>ExcelExtractor を扱うモジュールです。<br>解説はコメントとして記載しています。</p><pre><code>Option ExplicitConst MAIN_DATA_FIELD_NAME_DEFINED_ROW = 10         &#39; 抽出するExcelデータのフィールド名に含まれる文字列を定義している行Const MAIN_DATA_FIELD_ROW_DEFINED_ROW = 11          &#39; 抽出するExcelデータのフィールド名が含まれる行を定義している行Const MAIN_DATA_FIELD_COL_DEFINED_ROW = 12          &#39; 抽出するExcelデータの列を定義している行Const MAIN_DATA_START_ROW_DEFINED_ROW = 13          &#39; 抽出するExcelデータの開始行を定義している行Const MAIN_DATA_FORMAT_DEFINED_ROW = 14             &#39; 抽出するExcelデータの書式を定義している行Const MAIN_DATA_START_ROW = 15                      &#39; データ格納開始行Const MAIN_DATA_START_COL = 2                       &#39; データ格納開始列Dim mainSheet As WorksheetDim excelPath As StringDim excelSheetName As StringDim excelSearchFieldName As StringDim excelSearchFieldNameRow As LongDim excelSearchFieldNameCol As LongDim excelSearchDataStartRow As LongDim excelSearchEndMultiBlank As LongDim extractor As ExcelExtractor&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : Excelのデータ取得&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub extractExcelData()    Set extractor = New ExcelExtractor    &#39; Excelデータ用のセルクリア    clearDataSimplified ActiveSheet, MAIN_DATA_START_ROW, MAIN_DATA_START_COL    &#39; ExcelやDBの設定情報取得    setInfo    &#39; データ取得するExcelを設定    extractor.setFileSheet excelPath, excelSheetName    &#39; Excelをオープン（by modCmnFunction）    openFile excelPath    &#39; Excelからデータ取得する行の開始と終了を決定    extractor.setDataRows excelSearchFieldName, excelSearchFieldNameRow, excelSearchFieldNameCol, _        excelSearchDataStartRow, excelSearchEndMultiBlank    &#39; Excelからデータ取得    pasteExcelData mainSheet    &#39; Excelをクローズ（by modCmnFunction）    closeOpenedFile FalseEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : Excelから基本情報をセット&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub setInfo()    Set mainSheet = ActiveSheet    excelPath = ActiveSheet.Cells(1, 2).Value    excelSheetName = ActiveSheet.Cells(2, 2).Value    excelSearchFieldName = ActiveSheet.Cells(4, 2).Value    excelSearchFieldNameRow = ActiveSheet.Cells(5, 2).Value    excelSearchFieldNameCol = ActiveSheet.Cells(6, 2).Value    excelSearchDataStartRow = ActiveSheet.Cells(7, 2).Value    excelSearchEndMultiBlank = ActiveSheet.Cells(8, 2).ValueEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : Excel台帳からデータをセットする。&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function pasteExcelData(sheet As Worksheet)    Dim i As Long    Dim col As Variant    Dim field_name As String    Dim field_row As Long    Dim field_col As Long    Dim format As String    Debug.Print sheet.Name    i = 0    col = sheet.Cells(MAIN_DATA_FIELD_NAME_DEFINED_ROW, MAIN_DATA_START_COL).Value    Do While col &lt;&gt; &quot;&quot;        &#39; Excelからデータを取得するための条件取得        field_name = sheet.Cells(MAIN_DATA_FIELD_NAME_DEFINED_ROW, MAIN_DATA_START_COL + i)        field_row = sheet.Cells(MAIN_DATA_FIELD_ROW_DEFINED_ROW, MAIN_DATA_START_COL + i)        field_col = sheet.Cells(MAIN_DATA_FIELD_COL_DEFINED_ROW, MAIN_DATA_START_COL + i)        &#39; Excelのデータを貼り付け        extractor.setDataArray field_name, field_row, field_col        extractor.pasteData ThisWorkbook, sheet.Name, MAIN_DATA_START_ROW, MAIN_DATA_START_COL + i        &#39; Excelから取得したデータの書式を変更        format = sheet.Cells(MAIN_DATA_FORMAT_DEFINED_ROW, MAIN_DATA_START_COL + i)        changeFormatMaxRowBelow sheet, MAIN_DATA_START_ROW, MAIN_DATA_START_COL + i, format        &#39; 次の処理へ移る準備        i = i + 1        col = sheet.Cells(MAIN_DATA_FIELD_NAME_DEFINED_ROW, MAIN_DATA_START_COL + i).Value    LoopEnd Function</code></pre><p>今回のExcelマクロは、単体で使用する場面は少ないと思います。</p><p>例えば、複数のExcelファイルからデータを集約する、Excelファイルから抽出したデータをデータベースに登録する、というように拡張すると便利です。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;別のExcelファイルに記載されているデータを取得するマクロを製作しましたので紹介します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atman-33/template-excel-vba/tree/main/%E5%88%A5Excel%E3%</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】DB操作 – 第4回：Excel から MERGE を実行</title>
    <link href="https://www.computing-atman.com/2023/02/26/24-excel4-sql-merge-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/24-excel4-sql-merge-excel-vba/</id>
    <published>2023-02-26T10:01:47.000Z</published>
    <updated>2023-03-05T12:38:42.446Z</updated>
    
    <content type="html"><![CDATA[<p>DB操作を行うExcelマクロについて説明します。</p><p>今回の記事は『第4回』となります。</p><p>第1回：<a href="/2023/02/26/21-excel1-config-sheet-excel-vba/">Configシートの設定値をVBA上で取り扱う</a><br>第2回：<a href="/2023/02/26/22-excel2-sql-select-excel-vba/">SELECT文により取得したデータをExcelに格納</a><br>第3回：<a href="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/">Excel から INSERT, UPDATE, DELETE を実行</a><br>第4回：<a href="/2023/02/26/24-excel4-sql-merge-excel-vba/">Excel から MERGE を実行</a></p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/Template_OracleDB%E6%93%8D%E4%BD%9C">【Excelダウンロードはこちら】</a></p><p>※2021&#x2F;2&#x2F;5改修版<br>　・ODBC接続からOraOLEDB.Oracle接続に変更<br>　・INSER,UPDATE,MERGE文の生成方法を修正</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>第4回目は、第3回で実装したExcelシートに格納したデータ（セルの値）を、指定したDB（データベース）のテーブルに挿入・更新・削除する方法に加えて、データ挿入 or 更新（MERGE）を追加で実装しました。</p><img src="/2023/02/26/24-excel4-sql-merge-excel-vba/01.png" class><p>MERGE実行機能を追加したので、今回のExcelファイルからOracleデータベースを操作する機能は下記となります。</p><table><thead><tr><th align="left">タイプ</th><th align="left">機能</th></tr></thead><tbody><tr><td align="left">INSERT</td><td align="left">DBのテーブルにデータを挿入 （レコード挿入）</td></tr><tr><td align="left">UPDATE</td><td align="left">DBのテーブルに格納されているデータを更新 （レコード更新）</td></tr><tr><td align="left">DELETE</td><td align="left">DBのテーブルに格納されているデータを削除（レコード削除）</td></tr><tr><td align="left">MERGE</td><td align="left">DBのテーブルに格納されているデータを挿入もしくは更新</td></tr></tbody></table><hr><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります 。（使用するモジュールのみ記載）</p><pre><code>Template_ver1.x.x.xlsm├標準モジュール|   ├modCmnGlbConst|   ├modSql   |クラスモジュール    ├Configurator    ├DBManager</code></pre><hr><h2><span id="ソースコード解説">ソースコード解説</span></h2><p>前回まで、INSERT・UPDATE・DELETE・MERGEの各シートから実行されるマクロはそれぞれ別関数として独立させていました。</p><p>それでは、今後機能を拡張する際に不便かと思いましたので、INSERT・UPDATE・DELETE・MERGEの各シートから実行したマクロは、一つの関数を経由してからデータベース操作クラスにアクセスするように改修しました。（イメージは下記画像）</p><img src="/2023/02/26/24-excel4-sql-merge-excel-vba/02.png" class><p>例えば、MERGE文の実行では executeMergeSqlsOracle() を実行し、その中で executeDmlSqlsOracle 関数を呼び出しています。<br>（下記に一部のコードを記載していますが、詳細はExcelファイルのVBAを確認してみてください。）</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : D.各MERGE文を連続実行&#39; note  : Oracle対応&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub executeMergeSqlsOracle()    Dim sheet As Worksheet          &#39; SQLを生成する情報が格納されているシート    Dim tableName As String         &#39; 操作する対象のテーブル    Set sheet = ThisWorkbook.Worksheets(MERGE_SHEET_NAME)    tableName = sheet.Cells(TABLE_NAME_ROW, TABLE_NAME_COL)    executeDmlSqlsOracle &quot;MERGE&quot;, tableName, sheet, TYPE_DIFINED_ROW, DB_COL_NAME_DIFINED_ROW, DATA_START_ROW, DATA_START_COLEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 各INSERT, UPDATE, DELETE, MERGE文を連続実行&#39; note  : Oracle対応&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub executeDmlSqlsOracle(dmlType As String, tableName As String, sheet As Worksheet _    , typeDifinedRow As Long, dbColNameDifinedRow As Long, dataStartRow As Long, dataStartCol As Long)    Dim servicename As String, username As String, password As String    &#39; Config 設定の読み込み    Set config = New Configurator    config.setData ThisWorkbook.Worksheets(GLB_CONFIG_SHEET), GLB_CONFIG_KEY_COL, GLB_CONFIG_ITEM_COL, GLB_CONFIG_START_ROW    servicename = config.getItem(&quot;SERVICE_NAME&quot;)    username = config.getItem(&quot;USERNAME&quot;)    password = config.getItem(&quot;PASSWORD&quot;)    &#39; DB接続    Set dbManagerOracle = New DBManager    dbManagerOracle.openOracle servicename, username, password    &#39; トランザクション開始    dbManagerOracle.begintrans    On Error GoTo err    &#39; SQL実行    dbManagerOracle.createAndExcuteOracleSqls tableName, sheet, typeDifinedRow, dbColNameDifinedRow, dataStartRow, dataStartCol    &#39; コミット    dbManagerOracle.committrans    &#39; DB切断    dbManagerOracle.closeConnection    Select Case dmlType        Case &quot;INSERT&quot;            Application.StatusBar = Now &amp; &quot;SQL INSERT実行完了&quot;        Case &quot;UPDATE&quot;            Application.StatusBar = Now &amp; &quot;SQL UPDATE実行完了&quot;        Case &quot;DELETE&quot;            Application.StatusBar = Now &amp; &quot;SQL DELETE実行完了&quot;        Case &quot;MERGE&quot;            Application.StatusBar = Now &amp; &quot;SQL MERGE実行完了&quot;    End Select    Exit Suberr:    &#39; エラー発生時はロールバック    Debug.Print &quot;エラー番号:&quot; &amp; err.Number &amp; Chr(13) &amp; &quot;エラー内容:&quot; &amp; err.Description    MsgBox &quot;エラー番号:&quot; &amp; err.Number &amp; Chr(13) &amp; &quot;エラー内容:&quot; &amp; err.Description    MsgBox &quot;ロールバックを実行し、プログラムを終了します。&quot;    dbManagerOracle.rollbacktrans    EndEnd Sub</code></pre><p>今回は以上となります。これでExcelファイルのマクロからOracleデータベースを操作する方法の説明は終了となります。</p><p>これまで説明してきたような、データベースを操作する部分”のみ”を予め製作しておけば、他の用途に応じて追加改造することで様々な場面に対応できます。</p><p>基本機能を準備しておくことの大切さを共感して頂ければ幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB操作を行うExcelマクロについて説明します。&lt;/p&gt;
&lt;p&gt;今回の記事は『第4回』となります。&lt;/p&gt;
&lt;p&gt;第1回：&lt;a href=&quot;/2023/02/26/21-excel1-config-sheet-excel-vba/&quot;&gt;Configシートの設定値をVBA上で</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
    <category term="Oracle" scheme="https://www.computing-atman.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】DB操作 – 第3回：Excel から INSERT, UPDATE, DELETE を実行</title>
    <link href="https://www.computing-atman.com/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/</id>
    <published>2023-02-26T10:01:31.000Z</published>
    <updated>2023-03-05T12:38:42.415Z</updated>
    
    <content type="html"><![CDATA[<p>DB操作を行うExcelマクロについて説明します。</p><p>今回の記事は『第3回』となります。</p><p>第1回：<a href="/2023/02/26/21-excel1-config-sheet-excel-vba/">Configシートの設定値をVBA上で取り扱う</a><br>第2回：<a href="/2023/02/26/22-excel2-sql-select-excel-vba/">SELECT文により取得したデータをExcelに格納</a><br>第3回：<a href="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/">Excel から INSERT, UPDATE, DELETE を実行</a><br>第4回：<a href="/2023/02/26/24-excel4-sql-merge-excel-vba/">Excel から MERGE を実行</a></p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/Template_OracleDB%E6%93%8D%E4%BD%9C">【Excelダウンロードはこちら】</a></p><p>※2021&#x2F;2&#x2F;5改修版<br>　・ODBC接続からOraOLEDB.Oracle接続に変更<br>　・INSER,UPDATE,MERGE文の生成方法を修正</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a><ul><li><a href="#1db%E6%8E%A5%E7%B6%9A%E8%A8%AD%E5%AE%9A">①DB接続設定</a></li><li><a href="#2%E7%94%9F%E6%88%90%E3%81%99%E3%82%8Binsert%E6%96%87%E3%81%AE%E7%A2%BA%E8%AA%8D">②生成するINSERT文の確認</a></li><li><a href="#3insert%E6%96%87%E3%81%AE%E5%AE%9F%E8%A1%8C">③INSERT文の実行</a></li><li><a href="#4update%E6%96%87-delete%E6%96%87%E3%81%AE%E5%A0%B4%E5%90%88">④UPDATE文、DELETE文の場合</a></li></ul></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1%E6%A8%99%E6%BA%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABmodsql">①標準モジュール：modSql</a></li><li><a href="#2%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABdbmanager">②クラスモジュール：DBManager</a></li></ul></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>第3回目は、Excelシートに格納したデータ（セルの値）を、指定したDB（データベース）のテーブルに挿入・更新・削除する方法を説明します。</p><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/00.png" class><p>Excelの「Configシート」にDB接続内容を設定し、「INSERT・UPDATE・DELETE」の各シートからデータベースを操作します。</p><table><thead><tr><th align="left">タイプ</th><th align="left">機能</th></tr></thead><tbody><tr><td align="left">INSERT</td><td align="left">DBのテーブルにデータを挿入 （レコード挿入）</td></tr><tr><td align="left">UPDATE</td><td align="left">DBのテーブルに格納されているデータを更新 （レコード更新）</td></tr><tr><td align="left">DELETE</td><td align="left">DBのテーブルに格納されているデータを削除（レコード削除）</td></tr></tbody></table><p>下記に操作手順を示します。</p><hr><h3><span id="1db接続設定">①DB接続設定</span></h3><p>ConfigシートにDB接続の設定を記載します。（DBはOracleのみ対象）</p><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/01.png" class><p>SERVICE_NAME（サービス名）はOracleのクライアントもしくはサーバーをインストールして作成・設定した tnsnames.ora に記載されています。</p><p>例. 下記 tnsnames.ora の例では、TESTDB.GRAWORがサービス名です。</p><pre><code>TESTDB =  (DESCRIPTION =    (ADDRESS = (PROTOCOL = TCP)(HOST = ***)(PORT = 1521))    (CONNECT_DATA =      (SERVER = DEDICATED)      (SERVICE_NAME = TESTDB.GRAWOR)    )  )</code></pre><hr><h3><span id="2生成するinsert文の確認">②生成するINSERT文の確認</span></h3><p>ここでは、DBにデータをINSERTする場合の手順を示します。</p><p>まず、INSERTシートに格納したいデータを記載して、生成されるINSERT文を確認します。</p><p>INSERTするデータの設定方法は下記の通りです。</p><p>①対象テーブルを指定する。（例．TEST_TABLE）<br>②対象テーブルへ格納するカラムをタイプ・DBカラム名に指定する。<br>　（例．INSERT・ID、INSERT・LINE ・・・INSERT・START_DATE）<br>③指定したカラムに対して挿入するデータを記載する。<br>　（例．1000,A001,1,20200401,・・・）</p><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/02.png" class><p>問題なければ、INSERT文の実行に進みます。</p><hr><h3><span id="3insert文の実行">③INSERT文の実行</span></h3><p>INSERT実行のボタンを押下すると、INSERTシートに記載したデータを対象のDBテーブルに挿入する処理が開始されます。</p><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/03.png" class><p>上記の例では、INSERTを実行することで、DBの「TEST_TABLE」にデータが格納されました。</p><hr><h3><span id="4update文-delete文の場合">④UPDATE文、DELETE文の場合</span></h3><p>今までINSERT文の実行について説明してきましたが、他にも　UPDATE文・DELETE文　の実行に対応しています。</p><p>UPDATE文・DELETE文を実行する手順は、INSERT文と概ね同じです。下記の画像を参考に試してみてください。</p><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/04.png" class><img src="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/05.png" class><hr><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります 。（使用するモジュールのみ記載）</p><pre><code>Template_ver1.x.x.xlsm├標準モジュール|   ├modCmnGlbConst|   ├modSql   |クラスモジュール    ├Configurator    ├DBManager</code></pre><hr><h2><span id="ソースコード解説">ソースコード解説</span></h2><p>今回は、modCmnGlbConst と Configurator の説明は省略します。</p><p>※上記はDB操作 – 第1回にて記載</p><hr><h3><span id="1標準モジュールmodsql">①標準モジュール：modSql</span></h3><p>INSERTシートを例にすると、INSERT実行ボタンを押下すると、関数「executeInsertSqlsOracle()」が実行されます（下記）。</p><p>この関数内で、DBManagerクラスをインスタンス化し、インスタンス化したDBManagerからINSERT文を生成して実行する関数を呼び出しています。</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : A.各INSERT文を連続実行&#39; note  : Oracle対応&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub executeInsertSqlsOracle()    Dim servicename As String, username As String, password As String    Dim sheet As Worksheet          &#39; SQLを生成する情報が格納されているシート    Dim tableName As String         &#39; 操作する対象のテーブル    &#39; Config 設定の読み込み    Set config = New Configurator    config.setData ThisWorkbook.Worksheets(GLB_CONFIG_SHEET), GLB_CONFIG_KEY_COL, GLB_CONFIG_ITEM_COL, GLB_CONFIG_START_ROW    servicename = config.getItem(&quot;SERVICE_NAME&quot;)    username = config.getItem(&quot;USERNAME&quot;)    password = config.getItem(&quot;PASSWORD&quot;)    &#39; DB接続    Set dbManagerOracle = New DBManager    dbManagerOracle.openOracle servicename, username, password    Set sheet = ThisWorkbook.Worksheets(INSERT_SHEET_NAME)    tableName = sheet.Cells(TABLE_NAME_ROW, TABLE_NAME_COL)    &#39; トランザクション開始    dbManagerOracle.begintrans    On Error GoTo err    &#39; SQL実行    dbManagerOracle.createAndExcuteOracleSqls tableName, sheet, TYPE_DIFINED_ROW, DB_COL_NAME_DIFINED_ROW, DATA_START_ROW, DATA_START_COL    &#39; コミット    dbManagerOracle.committrans    &#39; DB切断    dbManagerOracle.closeConnection    Application.StatusBar = Now &amp; &quot;SQL INSERT実行完了&quot;    Exit Suberr:    &#39; エラー発生時はロールバック    Debug.Print &quot;エラー番号:&quot; &amp; err.Number &amp; Chr(13) &amp; &quot;エラー内容:&quot; &amp; err.Description    MsgBox &quot;エラー番号:&quot; &amp; err.Number &amp; Chr(13) &amp; &quot;エラー内容:&quot; &amp; err.Description    MsgBox &quot;ロールバックを実行し、プログラムを終了します。&quot;    dbManagerOracle.rollbacktrans    EndEnd Sub</code></pre><p>UPDATE・DELETE文の生成・実行のプログラム実行手順も、上記INSERTの手順と同じですので説明は省略します。詳細はExcelマクロのプログラムをご確認ください。</p><hr><h3><span id="2クラスモジュールdbmanager">②クラスモジュール：DBManager</span></h3><p>DBManagerはOracle DBへの接続に関する機能も備えています。</p><p>そちらは、DB操作 – 第2回　に記載していますので説明は省略します。</p><p>今回は、（１）標準モジュール：modSql　内の関数からDBManagerを操作することで、INSERT文を生成して実行するソース部分に関して説明します。</p><p>SQL文を生成して実行するまでに、下記関数を経由します。</p><p>createAndExcuteOracleSqls（全レコード実行）<br>　↓<br>createAndExcuteOracleSql（1レコード実行）<br>　↓<br>createOracleSql（SQL文の生成）<br>　checkSqlType（INSERT・UPDATE・DELETE文の選定）<br>　├ -&gt;createInsertOracleSql（INSERT文の生成）<br>　├ -&gt;createUpdateOracleSql（UPDATE文の生成）<br>　└ -&gt;createDeleteOracleSql（DELETE文の生成）</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : INSERT or UPDATE or DELETE SQL文を作成して実行（1行）&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub createAndExcuteOracleSql(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long)    Dim sql As String    &#39; SQL作成    sql = createOracleSql(table_name, sheet, sql_type_defined_row, db_col_name_defined_row, db_data_start_row, db_data_start_col)    &#39; SQL実行    excuteSql sqlEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : INSERT or UPDATE or DELETE SQL文を作成して実行（複数行）&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub createAndExcuteOracleSqls(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long)    Dim i As Long    Dim sql As String    Dim val    Dim db_data_end_row As Long    &#39; データの最終行を検索    i = 1    Do While sheet.Cells(db_data_start_row + i, db_data_start_col) &lt;&gt; &quot;&quot;        i = i + 1    Loop    db_data_end_row = db_data_start_row + i - 1    For i = db_data_start_row To db_data_end_row        createAndExcuteOracleSql table_name, sheet, sql_type_defined_row, db_col_name_defined_row, i, db_data_start_col    NextEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : INSERT or UPDATE or DELETE SQL文を作成&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Function createOracleSql(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long) As String    Dim sql As String    sql = &quot;&quot;    Select Case checkSqlType(sheet, sql_type_defined_row, db_data_start_col)        Case &quot;INSERT&quot;            sql = createInsertOracleSql(table_name, sheet, sql_type_defined_row, db_col_name_defined_row, db_data_start_row, db_data_start_col)            createOracleSql = sql            Exit Function        Case &quot;UPDATE&quot;            sql = createUpdateOracleSql(table_name, sheet, sql_type_defined_row, db_col_name_defined_row, db_data_start_row, db_data_start_col)            createOracleSql = sql            Exit Function        Case &quot;DELETE&quot;            sql = createDeleteOracleSql(table_name, sheet, sql_type_defined_row, db_col_name_defined_row, db_data_start_row, db_data_start_col)            createOracleSql = sql            Exit Function    End Select    createOracleSql = sqlEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : Excelから作成するSQLタイプがINSERT,UPDATE,DELTEのどれかなのか確認&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function checkSqlType(sheet As Worksheet, type_start_row As Long, type_start_col As Long) As String    Dim start_col As Long, end_col As Long    Dim i As Long    checkSqlType = &quot;&quot;    start_col = type_start_col    end_col = getMaxColRight(sheet, type_start_row, type_start_col)    For i = start_col To end_col        Select Case sheet.Cells(type_start_row, i)            Case &quot;INSERT&quot;                checkSqlType = &quot;INSERT&quot;                Exit Function            Case &quot;UPDATE&quot;                checkSqlType = &quot;UPDATE&quot;                Exit Function            Case &quot;DELETE&quot;                checkSqlType = &quot;DELETE&quot;                Exit Function        End Select    Next    MsgBox &quot;DBManager.checkSqlType:SQLタイプの設定が間違っています。INSERT,UPDATE,DELETEが含まれていません。&quot;    EndEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : INSERT SQL文を作成&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function createInsertOracleSql(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long) As String    Dim i As Long, j As Long    Dim start_row As Long, start_col As Long, end_col As Long    Dim sqltype As String    Dim sql As String, sql_1 As String, sql_2 As String    start_row = db_data_start_row    start_col = db_data_start_col    end_col = getMaxColRight(sheet, start_row, start_col)    sqltype = sheet.Cells(sql_type_defined_row, start_col).Value    i = start_row    &#39; INSERT文の生成    sql = &quot;&quot;    sql_1 = &quot;INSERT INTO &quot; &amp; table_name &amp; &quot; (&quot;    sql_2 = &quot;VALUES (&quot;    For j = start_col To end_col        &#39; DBカラム名を追加        sql_1 = sql_1 &amp; sheet.Cells(db_col_name_defined_row, j).Value        If j &lt;&gt; end_col Then            sql_1 = sql_1 &amp; &quot;, &quot;        Else            sql_1 = sql_1 &amp; &quot;) &quot;        End If        &#39; DBカラム名に対する値を追加        sql_2 = sql_2 &amp; &quot;&#39;&quot; &amp; sheet.Cells(i, j).Value &amp; &quot;&#39;&quot;        If j &lt;&gt; end_col Then            sql_2 = sql_2 &amp; &quot;, &quot;        Else            sql_2 = sql_2 &amp; &quot;) &quot;        End If    Next    sql = sql_1 + sql_2    sql = Replace(sql_1 + sql_2, &quot;, WHERE&quot;, &quot; WHERE&quot;)    If Right(sql, 1) = &quot;,&quot; Then sql = Mid(sql, 1, Len(sql) - 1)    If Right(sql, 5) = &quot; AND &quot; Then sql = Mid(sql, 1, Len(sql) - 5)    createInsertOracleSql = sqlEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : UPDATE SQL文を作成&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function createUpdateOracleSql(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long) As String    Dim i As Long, j As Long    Dim start_row As Long, start_col As Long, end_col As Long    Dim sqltype As String    Dim sql As String, sql_1 As String, sql_2 As String    start_row = db_data_start_row    start_col = db_data_start_col    end_col = getMaxColRight(sheet, start_row, start_col)    sqltype = sheet.Cells(sql_type_defined_row, start_col).Value    i = start_row    &#39; UPDATE文の生成    sql = &quot;&quot;    sql_1 = &quot;UPDATE &quot; &amp; table_name &amp; &quot; SET &quot;    sql_2 = &quot;WHERE &quot;    For j = start_col To end_col        If sheet.Cells(sql_type_defined_row, j).Value = &quot;UPDATE&quot; Then            &#39; UPDATEするDBカラム名と値を追加            sql_1 = sql_1 &amp; sheet.Cells(db_col_name_defined_row, j).Value &amp; &quot; = &#39;&quot; _                 &amp; sheet.Cells(i, j).Value &amp; &quot;&#39;&quot;            If j &lt;&gt; end_col Then                sql_1 = sql_1 &amp; &quot;, &quot;            Else                sql_1 = sql_1 &amp; &quot; &quot;            End If        ElseIf sheet.Cells(sql_type_defined_row, j).Value = &quot;WHERE&quot; Then            &#39; WHEREに対するDBカラム名と値を追加            sql_2 = sql_2 &amp; sheet.Cells(db_col_name_defined_row, j).Value &amp; &quot; = &#39;&quot; _                 &amp; sheet.Cells(i, j).Value &amp; &quot;&#39;&quot;            If j &lt;&gt; end_col Then                sql_2 = sql_2 &amp; &quot; AND &quot;            Else                sql_2 = sql_2 &amp; &quot; &quot;            End If        Else            Debug.Print (&quot;UPDATE文に対して、SQLタイプ設定が正しくありません。設定を見直して下さい。&quot;)            Exit Function        End If    Next    sql = sql_1 + sql_2    sql = Replace(sql_1 + sql_2, &quot;, WHERE&quot;, &quot; WHERE&quot;)    If Right(sql, 1) = &quot;,&quot; Then sql = Mid(sql, 1, Len(sql) - 1)    If Right(sql, 5) = &quot; AND &quot; Then sql = Mid(sql, 1, Len(sql) - 5)    createUpdateOracleSql = sqlEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : DELETE SQL文を作成&#39; note  : 引数&#39;         テーブル名、ワークシート、SQLタイプ指定行、データベースカラム名指定行&#39;         データ格納開始行、データ格納開始列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function createDeleteOracleSql(table_name As String, sheet As Worksheet, sql_type_defined_row As Long, db_col_name_defined_row As Long _    , db_data_start_row As Long, db_data_start_col As Long) As String    Dim i As Long, j As Long    Dim start_row As Long, start_col As Long, end_col As Long    Dim sqltype As String    Dim sql As String, sql_1 As String, sql_2 As String    start_row = db_data_start_row    start_col = db_data_start_col    end_col = getMaxColRight(sheet, start_row, start_col)    sqltype = sheet.Cells(sql_type_defined_row, start_col).Value    i = start_row    &#39; DELETE文の生成    sql = &quot;&quot;    sql_1 = &quot;DELETE FROM &quot; &amp; table_name &amp; &quot; &quot;    sql_2 = &quot;WHERE &quot;    For j = start_col To end_col        If sheet.Cells(sql_type_defined_row, j).Value = &quot;DELETE&quot; Then            &#39; WHEREに対するDBカラム名と値を追加            sql_2 = sql_2 &amp; sheet.Cells(db_col_name_defined_row, j).Value &amp; &quot; = &#39;&quot; _                 &amp; sheet.Cells(i, j).Value &amp; &quot;&#39;&quot;            If j &lt;&gt; end_col Then                sql_2 = sql_2 &amp; &quot; AND &quot;            Else                sql_2 = sql_2 &amp; &quot; &quot;            End If        Else            Debug.Print (&quot;DELETE文に対して、SQLタイプ設定が正しくありません。設定を見直して下さい。&quot;)            Exit Function        End If    Next    sql = sql_1 + sql_2    sql = Replace(sql_1 + sql_2, &quot;, WHERE&quot;, &quot; WHERE&quot;)    If Right(sql, 1) = &quot;,&quot; Then sql = Mid(sql, 1, Len(sql) - 1)    If Right(sql, 5) = &quot; AND &quot; Then sql = Mid(sql, 1, Len(sql) - 5)    createDeleteOracleSql = sqlEnd Function</code></pre><p>今回は以上となります。</p><p>今回説明した機能を活用すれば、例えば、業務で扱う帳票等をExcelで入力し、入力されたデータをデータベースに格納することが可能となります。</p><p>次回は、データベースに格納されているデータに応じて　INSERT or UPDATE　を選択するMERGE文を実行する機能を追加してみたいと思います。</p><p>次回のMERGE文生成機能まで準備しておけば、Oracleデータベースを操作するExcelプラットフォームとして扱えるのではないでしょうか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB操作を行うExcelマクロについて説明します。&lt;/p&gt;
&lt;p&gt;今回の記事は『第3回』となります。&lt;/p&gt;
&lt;p&gt;第1回：&lt;a href=&quot;/2023/02/26/21-excel1-config-sheet-excel-vba/&quot;&gt;Configシートの設定値をVBA上で</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
    <category term="Oracle" scheme="https://www.computing-atman.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】DB操作 – 第2回：SELECT文により取得したデータをExcelに格納</title>
    <link href="https://www.computing-atman.com/2023/02/26/22-excel2-sql-select-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/22-excel2-sql-select-excel-vba/</id>
    <published>2023-02-26T10:01:10.000Z</published>
    <updated>2023-03-05T12:38:42.399Z</updated>
    
    <content type="html"><![CDATA[<p>DB操作を行うExcelマクロについて説明します。</p><p>今回の記事は『第2回』となります。</p><p>第1回：<a href="/2023/02/26/21-excel1-config-sheet-excel-vba/">Configシートの設定値をVBA上で取り扱う</a><br>第2回：<a href="/2023/02/26/22-excel2-sql-select-excel-vba/">SELECT文により取得したデータをExcelに格納</a><br>第3回：<a href="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/">Excel から INSERT, UPDATE, DELETE を実行</a><br>第4回：<a href="/2023/02/26/24-excel4-sql-merge-excel-vba/">Excel から MERGE を実行</a></p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/Template_OracleDB%E6%93%8D%E4%BD%9C">【Excelダウンロードはこちら】</a></p><p>※2021&#x2F;2&#x2F;5改修版<br>　・ODBC接続からOraOLEDB.Oracle接続に変更<br>　・INSER,UPDATE,MERGE文の生成方法を修正</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a><ul><li><a href="#1db%E6%8E%A5%E7%B6%9A%E8%A8%AD%E5%AE%9A">①DB接続設定</a></li><li><a href="#2oracle%E6%8E%A5%E7%B6%9A%E3%83%86%E3%82%B9%E3%83%88">②Oracle接続テスト</a></li><li><a href="#3sql%E6%96%87%E3%82%92%E5%AE%9F%E8%A1%8C">③SQL文を実行</a></li></ul></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1dbmanager">①DBManager</a></li></ul></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>第2回目は、SELECT文により取得したデータをExcelに格納する方法について説明します。</p><img src="/2023/02/26/22-excel2-sql-select-excel-vba/00.png" class><p>Excelの「Configシート」にDB接続を設定し、「SQLシート」にデータ抽出するSQL文を記載してマクロを実行します。</p><p>そうすると、各シート（SQLシートのシート名に記載した名称）にSELECTした結果が貼り付けられます。</p><p>下記に操作手順を示します。</p><hr><h3><span id="1db接続設定">①DB接続設定</span></h3><p>ConfigシートにDB接続の設定を記載します。（DBはOracleのみ対象）</p><img src="/2023/02/26/22-excel2-sql-select-excel-vba/01.png" class><p>SERVICE_NAME（サービス名）はOracleのクライアントもしくはサーバーをインストールして作成・設定した tnsnames.ora に記載されています。</p><p>例. 下記 tnsnames.ora の例では、TESTDB.GRAWORがサービス名です。</p><pre><code>TESTDB =  (DESCRIPTION =    (ADDRESS = (PROTOCOL = TCP)(HOST = ***)(PORT = 1521))    (CONNECT_DATA =      (SERVER = DEDICATED)      (SERVICE_NAME = TESTDB.GRAWOR)    )  )</code></pre><hr><h3><span id="2oracle接続テスト">②Oracle接続テスト</span></h3><p>Oracle DBに接続し、 Configシートの接続設定が正しいか確認します。</p><img src="/2023/02/26/22-excel2-sql-select-excel-vba/02.png" class><p>「オラクルへの接続テスト完了」とメッセージが表示されれば、問題なくOracle DBに接続できています。</p><hr><h3><span id="3sql文を実行">③SQL文を実行</span></h3><p>SQL実行ボタンを押すと、SQL文を実行し、各シートに抽出データを貼り付けます。</p><img src="/2023/02/26/22-excel2-sql-select-excel-vba/03.png" class><img src="/2023/02/26/22-excel2-sql-select-excel-vba/04.png" class><p>SQLシートの「シート名」項目に記載した名称のシートが作成され、SQLの抽出結果が貼り付けられます。</p><hr><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります 。（使用するモジュールのみ記載）</p><pre><code>Template_ver1.x.x.xlsm├標準モジュール|   ├modCmnGlbConst|   ├modSql   |クラスモジュール    ├Configurator    ├DBManager</code></pre><hr><h2><span id="ソースコード解説">ソースコード解説</span></h2><p>今回は、modCmnGlbConst と Configurator の説明は省略します。</p><p>※上記はDB操作 – 第1回にて記載</p><hr><h3><span id="1dbmanager">①DBManager</span></h3><p>DB操作を行うクラスです。Oracle DBへの接続やSQLを実行する機能を備えます。</p><p>必要な変数・関数を抜粋し、 解説はコメントとして記載しています。</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; DBManager クラス&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; 【使用手順 - SELECTによるデータ取得】&#39; ①インスタンス生成&#39; ②openOracle：オラクルへの接続 or openAccess：アクセスへの接続&#39; ③excuteSql：SQLの実行&#39; ④pasteRecordset：実行したSQLにより取得したデータを貼り付け&#39; ⑤closeRecordset：レコードセットのクローズ&#39; ⑥closeConnection：DB切断&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; 【使用手順 - INSERT or UPDATE or DELETEの実行】&#39; ①インスタンス生成&#39; ②openOracle：オラクルへの接続 or openAccess：アクセスへの接続&#39; ③begintrans：トランザクション開始&#39; ④createAndExcuteOracleSql(s)：SQLを生成して実行&#39; ⑤committrans：コミット　※エラー発生時 rollbacktrans&#39; ⑥closeConnection：DB切断&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; メンバ変数（Me.で参照可能とするためpublic）Public con As Object    &#39; ConnectionPublic rs As Object     &#39; Recordset&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : コンストラクタ&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub Class_Initialize()    Set Me.con = CreateObject(&quot;Adodb.Connection&quot;)    Set Me.rs = CreateObject(&quot;Adodb.Recordset&quot;)End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : オラクルへの接続処理&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub openOracle(servicename As String, username As String, password As String)    Dim constr As String    constr = &quot;DSN=&quot; &amp; servicename    constr = constr &amp; &quot;;UID=&quot; &amp; username    constr = constr &amp; &quot;;PWD=&quot; &amp; password    Debug.Print (constr)    Me.con.ConnectionString = constr    Me.con.Open    Debug.Print &quot;オラクルへの接続完了&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : アクセスへの接続処理&#39; note  : 引数 access_name はフルパス（フォルダ名＋ファイル名）&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub openAccess(access_name As String)    Me.con.Open &quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source=&quot; &amp; access_name &amp; &quot;;&quot; &#39;Accessファイルに接続    Debug.Print &quot;アクセスへの接続完了&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : トランザクション開始処理&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub begintrans()    Me.con.begintrans    Debug.Print &quot;トランザクション開始&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : コミット処理&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub committrans()    Me.con.committrans    Debug.Print &quot;コミット処理実施&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : ロールバック処理&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub rollbacktrans()    Me.con.rollbacktrans    Debug.Print &quot;ロールバック処理実施&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : DB切断処理&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub closeConnection()    On Error Resume Next    Me.con.Close    Me.rs.Close    Set Me.con = Nothing    Set Me.rs = Nothing    On Error GoTo 0     &#39; エラー処理の命令取り消し    Debug.Print &quot;DBへの切断完了&quot;End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : レコードセットのクローズ&#39; note  : SQL実行でレコードセットにデータが格納された後はクローズ必要&#39;         （連続でSQLを実行してレコードセットをOpenすることはできない）&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub closeRecordset()    Me.rs.CloseEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : SQLの実行&#39; note  : SELECT文の実行後は、レコードセットにデータが格納される。&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub excuteSql(str_sql As String)    Debug.Print str_sql &amp; &quot; を実行します。&quot;    rs.Open str_sql, conEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 実行したSQLで取得したレコードセットをExcelに貼り付け&#39; note  : need_filed_ -&gt; Trueでフィールド名も書き込み&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub pasteRecordset(worksheet_ As Worksheet, data_start_row_ As Long, data_start_col_ As Long, need_filed_ As Boolean)    Dim i As Long    If need_filed_ = True Then        &#39;フィールド名の書き出し        For i = 0 To rs.Fields.count - 1            worksheet_.Cells(data_start_row_, data_start_col_ + i).Value = rs.Fields(i).Name        Next i        data_start_row_ = data_start_row_ + 1    End If    &#39;CopyFromRecordsetメソッドで基準セルを指定してデータの書き出し    worksheet_.Cells(data_start_row_, data_start_col_).CopyFromRecordset rsEnd Sub（２）modSqlDBManagerクラスを利用してSQLを実行し、Excelシートにデータを貼り付けるモジュールです。必要な変数・関数を抜粋し、 解説はコメントとして記載しています。Option Explicit    &#39; ---- SELECT文を実行する機能の設定項目    Const SQL_SHEET_NAME = &quot;SQL&quot;    Const DATA_SHEET_NAME_COL = 1    Const SQL_COL = 2    Const CONNECT_TYPE_COL = 3    Const SQL_START_ROW = 2    Dim config As Configurator    Dim dbManagerOracle As dbManager    Dim dbManagerAccess As dbManager&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : シートに登録されている各SELECT文を実行&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub executeSelects()    Dim i As Long    Dim row As Long    Dim wsActive As Worksheet    Dim servicename As String, username As String, password As String, accessPath As String    Dim sqlSheet As Worksheet       &#39; データ取得するSQLが格納されているシート    Dim dataSheetName As String     &#39; SQLのSELECTデータを貼り付けるシート名    Dim sql As String               &#39; SQL（SELECT文）    Dim connectType As String       &#39; 接続タイプ（Oracle or Access）    Set dbManagerOracle = Nothing    Set dbManagerAccess = Nothing    focus True    &#39; 実行時のシートを保存    Set wsActive = ActiveSheet    &#39; Config 設定の読み込み    Set config = New Configurator    config.setData ThisWorkbook.Worksheets(GLB_CONFIG_SHEET), GLB_CONFIG_KEY_COL, GLB_CONFIG_ITEM_COL, GLB_CONFIG_START_ROW    servicename = config.getItem(&quot;SERVICE_NAME&quot;)    username = config.getItem(&quot;USERNAME&quot;)    password = config.getItem(&quot;PASSWORD&quot;)    accessPath = config.getItem(&quot;ACCESS_PATH&quot;)    i = 0    dataSheetName = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, DATA_SHEET_NAME_COL)    sql = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, SQL_COL)    connectType = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, CONNECT_TYPE_COL)    &#39; シートに登録されている各SELECT文を実行（シート名が無くなるまで繰り返し）    Do While dataSheetName &lt;&gt; &quot;&quot;        &#39; データ貼り付け先のシートを削除        If sheetExists(ThisWorkbook, dataSheetName) Then            Application.DisplayAlerts = False &#39; メッセージを非表示            ThisWorkbook.Worksheets(dataSheetName).Delete            Application.DisplayAlerts = True  &#39; メッセージを表示        End If        &#39; データ貼り付け先のシートを作成        If sql &lt;&gt; &quot;&quot; Then            &#39; SQL 有り　→　シート作成            createSheet ThisWorkbook, dataSheetName        End If        &#39; - Oracle 接続        If connectType = &quot;Oracle&quot; Then            &#39; DB接続            If (sql &lt;&gt; &quot;&quot;) And (dbManagerOracle Is Nothing) Then                Set dbManagerOracle = New dbManager                dbManagerOracle.openOracle servicename, username, password            End If            &#39; SQLを実行            dbManagerOracle.excuteSql sql            &#39; シートにSQLで取得したデータを貼り付け            dbManagerOracle.pasteRecordset ThisWorkbook.Worksheets(dataSheetName), 1, 1, True            &#39; レコードセットをクローズ            dbManagerOracle.closeRecordset        &#39; - Access 接続        ElseIf connectType = &quot;Access&quot; Then            &#39; DB接続            If (sql &lt;&gt; &quot;&quot;) And (dbManagerAccess Is Nothing) Then                Set dbManagerAccess = New dbManager                dbManagerAccess.openAccess accessPath            End If            &#39; SQLを実行            dbManagerAccess.excuteSql sql            &#39; シートにSQLで取得したデータを貼り付け            dbManagerAccess.pasteRecordset ThisWorkbook.Worksheets(dataSheetName), 1, 1, True            &#39; レコードセットをクローズ            dbManagerAccess.closeRecordset        Else            &#39; SQLが記載かつ接続タイプが設定されていない場合は終了            If sql &lt;&gt; &quot;&quot; Then                MsgBox SQL_SHEET_NAME &amp; &quot; シートの接続タイプが正しく設定されていません。終了します。&quot;                ThisWorkbook.Worksheets(SQL_SHEET_NAME).Activate                End            End If        End If        i = i + 1        dataSheetName = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, DATA_SHEET_NAME_COL)        sql = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, SQL_COL)        connectType = ThisWorkbook.Worksheets(SQL_SHEET_NAME).Cells(SQL_START_ROW + i, CONNECT_TYPE_COL)    Loop    &#39; - Oracle切断    If Not dbManagerOracle Is Nothing Then        dbManagerOracle.closeConnection    End If    &#39; - Access切断    If Not dbManagerAccess Is Nothing Then        dbManagerAccess.closeConnection    End If    wsActive.Activate    focus False    Application.StatusBar = Now &amp; &quot;SQL SELECT実行完了&quot;End Sub</code></pre><p>今回は以上となります。</p><p>この機能を活用すれば、ボタン一つで DBから最新のデータを抽出可能となります。<br>例えば、データ集計業務の効率化などに役立てることができます。</p><p>次回は、Excelシートに入力したデータを基に、Oracle DBにINSERT・UPDATE・DELETEする方法を説明します。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB操作を行うExcelマクロについて説明します。&lt;/p&gt;
&lt;p&gt;今回の記事は『第2回』となります。&lt;/p&gt;
&lt;p&gt;第1回：&lt;a href=&quot;/2023/02/26/21-excel1-config-sheet-excel-vba/&quot;&gt;Configシートの設定値をVBA上で</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
    <category term="Oracle" scheme="https://www.computing-atman.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】DB操作 – 第1回：Configシートの設定値をVBA上で取り扱う</title>
    <link href="https://www.computing-atman.com/2023/02/26/21-excel1-config-sheet-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/21-excel1-config-sheet-excel-vba/</id>
    <published>2023-02-26T10:00:45.000Z</published>
    <updated>2023-03-05T12:38:42.384Z</updated>
    
    <content type="html"><![CDATA[<p>DB操作を行うExcelマクロを作成しました。</p><p>今回のマクロは記載する内容が多いため、計4回に分けて説明します。</p><p>第1回：<a href="/2023/02/26/21-excel1-config-sheet-excel-vba/">Configシートの設定値をVBA上で取り扱う</a><br>第2回：<a href="/2023/02/26/22-excel2-sql-select-excel-vba/">SELECT文により取得したデータをExcelに格納</a><br>第3回：<a href="/2023/02/26/23-excel3-sql-insert-update-delete-excel-vba/">Excel から INSERT, UPDATE, DELETE を実行</a><br>第4回：<a href="/2023/02/26/24-excel4-sql-merge-excel-vba/">Excel から MERGE を実行</a></p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/Template_OracleDB%E6%93%8D%E4%BD%9C">【Excelダウンロードはこちら】</a></p><p>※2021&#x2F;2&#x2F;5改修版<br>　・ODBC接続からOraOLEDB.Oracle接続に変更<br>　・INSER,UPDATE,MERGE文の生成方法を修正</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a><ul><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li></ul></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1modcmnglbconst">①modCmnGlbConst</a></li><li><a href="#2configurator">②Configurator</a></li><li><a href="#3configurator-%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B">③Configurator の使用例</a></li></ul></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>第1回目は、DB操作で使用する各設定値をVBA（マクロ開発）で扱う方法について説明します。</p><img src="/2023/02/26/21-excel1-config-sheet-excel-vba/01.png" class><p>Oracle接続に必要な「サービス名」・「ユーザー名」・「パスワード」の３つをConfigシートで設定しています。</p><p>今回説明する Configurator クラスを使えば、設定値情報を簡単に追加できます。（いわゆる ini ファイルをExcelに取り込んだイメージ）</p><hr><h3><span id="パッケージ構成">パッケージ構成</span></h3><p>Excelマクロ内の構成は下記となります 。<br>（使用するモジュールのみ下記に記載）</p><pre><code>Template_ver1.x.x.xlsm├標準モジュール|   ├modCmnGlbConst||クラスモジュール    ├Configurator</code></pre><hr><h2><span id="ソースコード解説">ソースコード解説</span></h2><hr><h3><span id="1modcmnglbconst">①modCmnGlbConst</span></h3><p>Excelシートから設定値を抽出するために、Config 情報が記載されている Excel の「シート・行・列」を定義しています。</p><pre><code>Option Explicit&#39; Config 設定シート情報Public Const GLB_CONFIG_SHEET = &quot;Config&quot;Public Const GLB_CONFIG_KEY_COL = 1Public Const GLB_CONFIG_ITEM_COL = 2Public Const GLB_CONFIG_START_ROW = 2</code></pre><p>例えば、Config シートではない別シート名を使いたい場合は、上記定数 GLB_CONFIG_SHEET を変更します。</p><hr><h3><span id="2configurator">②Configurator</span></h3><p>Config 情報を抽出する機能を持ったクラスです。<br>解説はコメントとして記載しています。</p><pre><code>&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; Configurator クラス&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; 【使用手順】&#39; ① インスタンス生成&#39; ② setData    ：設定値を格納&#39; ③ getItem    ：設定値を取得&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; メンバ変数（Me.で参照可能とするためpublic）Public dic As Object&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : コンストラクタ&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub Class_Initialize()    Set Me.dic = CreateObject(&quot;Scripting.Dictionary&quot;)End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : Config 情報である設定項目と設定値を格納&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub setData(sheet As Worksheet, keyCol As Long, itemCol As Long, startRow As Long)    Dim i As Long    Dim row As Long    Dim key As String, item As String    i = 0    row = startRow    Do While sheet.Cells(row, keyCol) &lt;&gt; &quot;&quot;        key = sheet.Cells(row, keyCol)        item = sheet.Cells(row, itemCol)        Me.dic.add key, item        row = row + 1    LoopEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : setData 関数で取得した Config 情報の設定値を取得&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Function getItem(key As String) As String    getItem = dic.item(key)End Function</code></pre><hr><h3><span id="3configurator-の使用例">③Configurator の使用例</span></h3><p>Configurator クラスを用いた使用例です。</p><p>下記を実行すると、メッセージボックスに Config シートで設定した SERVICE_NAME の値が表示されます。</p><pre><code>Option Explicit    Dim config As ConfiguratorPublic Sub main()    Dim servicename As String, username As String, password As String, accessPath As String    &#39; Config 設定の読み込み    Set config = New Configurator    config.setData ThisWorkbook.Worksheets(GLB_CONFIG_SHEET), GLB_CONFIG_KEY_COL, GLB_CONFIG_ITEM_COL, GLB_CONFIG_START_ROW    servicename = config.getItem(&quot;SERVICE_NAME&quot;)    Msgbox servicenameEnd Sub</code></pre><p>今回は以上となります。</p><p>次回は、Config シートで設定した項目値を扱い DB のデータを取得する方法を説明します。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB操作を行うExcelマクロを作成しました。&lt;/p&gt;
&lt;p&gt;今回のマクロは記載する内容が多いため、計4回に分けて説明します。&lt;/p&gt;
&lt;p&gt;第1回：&lt;a href=&quot;/2023/02/26/21-excel1-config-sheet-excel-vba/&quot;&gt;Config</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>【C#】PCカメラから映像を取得するアプリ</title>
    <link href="https://www.computing-atman.com/2023/02/26/20-pc-camera-app-cs/"/>
    <id>https://www.computing-atman.com/2023/02/26/20-pc-camera-app-cs/</id>
    <published>2023-02-26T09:29:30.000Z</published>
    <updated>2023-03-05T12:38:42.346Z</updated>
    
    <content type="html"><![CDATA[<p>PCに搭載されているカメラの映像を取得して、解析等を行いたいと思ったことはないでしょうか？</p><p>今回、PCカメラの映像を加工して表示させるアプリケーションを作成しましたので紹介します。</p><p><a href="https://github.com/atman-33/pc-camera-app-cs">【ソースコードはこちら】</a></p><p><strong>2020&#x2F;4&#x2F;14追記</strong><br>ソースコードをダウンロードして、Visual Studio からソリューションファイルを開くと参照部分にエラーが発生する場合があります。<br>下記リンク先の方法で対処できますので参考にしてください。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E8%A3%BD%E4%BD%9C%E6%89%8B%E9%A0%86">製作手順</a><ul><li><a href="#1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">①プロジェクトの作成</a></li><li><a href="#2opencvsharp%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">②OpenCVSharpインストール</a></li><li><a href="#3aforgenet%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">③AForge.NETダウンロード</a></li><li><a href="#4aforgenet-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8F%82%E7%85%A7%E8%A8%AD%E5%AE%9A">④AForge.NET モジュール参照設定</a></li><li><a href="#5%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E8%A3%BD%E4%BD%9C">⑤アプリケーションのデザイン製作</a></li><li><a href="#6%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF">⑥ソースコードの埋め込み</a></li><li><a href="#7%E9%A1%94%E8%AA%8D%E8%AD%98%E3%81%AE%E6%96%B9%E6%B3%95">⑦顔認識の方法</a></li></ul></li></ul><!-- tocstop --><hr><hr><h2><span id="概要">概要</span></h2><p>PCに内蔵されているカメラと画像処理モードを選択することで、対応した映像をアプリケーションに表示します。</p><p>【画像処理モード】</p><ul><li>なし</li><li>グレー　：　映像がグレーになります。</li><li>顔認識　：　顔を認識した部分に赤の矩形を表示します。</li></ul><img src="/2023/02/26/20-pc-camera-app-cs/app_sample.png" class><hr><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>今回のアプリケーションはVisual Studioで作成しています。プロジェクトフォルダ内には多くのファイルが含まれておりますので、主なファイルのみ説明します。</p><p>こちらは、上でダウンロード可能なソースコードと対応しています。</p><pre><code>PcCameraApp|-MainForm.cs|-OpenCVSharpBitmap.cs|-haarcascade_frontalface_default.xml</code></pre><table><thead><tr><th align="left">ファイル名</th><th align="left">機能</th></tr></thead><tbody><tr><td align="left">MainForm.cs</td><td align="left">アプリの操作に対する各種処理</td></tr><tr><td align="left">OpenCVSharpBitmap.cs</td><td align="left">映像を加工してBitmapで返すクラス</td></tr><tr><td align="left">haarcascade_frontalface_default.xml</td><td align="left">顔を検出するカスケードファイル</td></tr></tbody></table><hr><h2><span id="製作手順">製作手順</span></h2><p>Visual Studio を用いたアプリケーションの製作手順について説明していきます。</p><hr><h3><span id="1プロジェクトの作成">①プロジェクトの作成</span></h3><p>プロジェクトの作成に関して、詳細の説明は省略させて頂きます。</p><p>下記リンクを参考にしてプロジェクト作成まで進めてください。</p><p><a href="https://docs.microsoft.com/ja-jp/visualstudio/ide/create-new-project?view=vs-2019">Visual Studio での新しいプロジェクトの作成</a></p><hr><h3><span id="2opencvsharpインストール">②OpenCVSharpインストール</span></h3><p>画像処理の機能を扱えるように OpenCVSharp を使用できるようにします。</p><p>「プロジェクト」→「NuGet パッケージの管理」を開きます。</p><img src="/2023/02/26/20-pc-camera-app-cs/visual_studio_1.png" class><p>参照をクリックし、「opencv」を入力します。</p><p>表示された一覧から、「OpenCvSharp3-AnyCPU」を選択してインストールします。</p><img src="/2023/02/26/20-pc-camera-app-cs/11.png" class><hr><h3><span id="3aforgenetダウンロード">③AForge.NETダウンロード</span></h3><p>PC付随のカメラを利用する際には、AForge.NETという外部ライブラリで一通りの処理がまかなえます。</p><p>ここで、カメラの映像取得用ライブラリを準備します。</p><p><a href="http://www.aforgenet.com/framework/downloads.html">AFroge.netの配布サイト</a></p><p>「Download Libraries Only 」を選択しダウンロードを行います。</p><img src="/2023/02/26/20-pc-camera-app-cs/aforge_net.png" class><hr><h3><span id="4aforgenet-モジュール参照設定">④AForge.NET モジュール参照設定</span></h3><p>ダウンロードしたフォルダ（AForge.NET Framework-2.2.5-(libs only).zip）の中に「Relese」というフォルダがあります。</p><p>この「Relese」フォルダから、今回必要な下記の２点のファイルをVisual Studioの参照設定に追加します。</p><ul><li>AForge.Video.dll</li><li>AForge.Video.DirecrtShow.dll</li></ul><img src="/2023/02/26/20-pc-camera-app-cs/visual_studio_1.png" class><img src="/2023/02/26/20-pc-camera-app-cs/visual_studio_2.png" class><hr><h3><span id="5アプリケーションのデザイン製作">⑤アプリケーションのデザイン製作</span></h3><p>今回のアプリケーションはシンプルです。</p><p>フォームアプリケーションのデザイン側で、ツールボックスより、必要な数のComboBox、Button、Label、PictureBox、Timerを配置します。</p><p>ここで、PictureBox はカメラ映像を映す部分ですが、映像が大きい場合は、準備した PictureBox 内に映像が収まりません。</p><p>そのため、PictureBox の SizeMode を StreachImage に変更しておきましょう。</p><img src="/2023/02/26/20-pc-camera-app-cs/visual_studio_3.png" class><hr><h3><span id="6ソースコードの埋め込み">⑥ソースコードの埋め込み</span></h3><p>ここからはソースコードについてです。まずは、フォームのコード側です。</p><p>▼ MainForm.cs</p><pre><code>using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Diagnostics;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;using AForge.Video;             // AForge.NETライブラリから読込using AForge.Video.DirectShow;  // AForge.NETライブラリから読込using Original;namespace PcCameraApp&#123;    public partial class MainForm : Form    &#123;        // フィールド        readonly string[] IMAGE_MODE = &#123; &quot;なし&quot;, &quot;グレー&quot;, &quot;顔認識&quot; &#125;;  // 画像処理モード        private string mode;                                            // 現在の画像処理モード        public bool DeviceExist = false;                // デバイス有無        public FilterInfoCollection videoDevices;       // カメラデバイスの一覧        public VideoCaptureDevice videoSource = null;   // カメラデバイスから取得した映像        public MainForm()        &#123;            InitializeComponent();        &#125;        // Loadイベント（Formの立ち上げ時に実行）        private void Form1_Load(object sender, EventArgs e)        &#123;            Debug.WriteLine(&quot;Formのロード開始&quot;);            this.getCameraInfo();        &#125;        // カメラ情報の取得        public void getCameraInfo()        &#123;            try            &#123;                // 端末で認識しているカメラデバイスの一覧を取得                videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);                comboBoxCameraType.Items.Clear();                if (videoDevices.Count == 0)                    throw new ApplicationException();                foreach (FilterInfo device in videoDevices)                &#123;                    // カメラデバイスの一覧をコンボボックスに追加                    comboBoxCameraType.Items.Add(device.Name);                    comboBoxCameraType.SelectedIndex = 0;                    DeviceExist = true;                &#125;            &#125;            catch (ApplicationException)            &#123;                DeviceExist = false;                comboBoxCameraType.Items.Add(&quot;Deviceが存在していません。&quot;);            &#125;            comboBoxMode.Items.Clear();            // 画像処理モードの追加            foreach (string mode in IMAGE_MODE)            &#123;                comboBoxMode.Items.Add(mode);            &#125;        &#125;        // 開始or停止ボタン        private void button1_Click(object sender, EventArgs e)        &#123;            Debug.WriteLine(&quot;ボタンクリック&quot;);            mode = comboBoxMode.Text;            if (buttonStartStop.Text == &quot;開始&quot;)            &#123;                if (DeviceExist)                &#123;                    videoSource = new VideoCaptureDevice(videoDevices[comboBoxCameraType.SelectedIndex].MonikerString);                    videoSource.NewFrame += new NewFrameEventHandler(videoRendering);                    this.CloseVideoSource();                    videoSource.Start();                    buttonStartStop.Text = &quot;停止&quot;;                    timer1.Enabled = true;                    Debug.WriteLine(&quot;画像処理モード：&quot; + mode);                &#125;                else                &#123;                    labelFps.Text = &quot;デバイスが存在していません。&quot;;                &#125;            &#125;            else            &#123;                if (videoSource.IsRunning)                &#123;                    timer1.Enabled = false;                    this.CloseVideoSource();                    labelFps.Text = &quot;停止中&quot;;                    buttonStartStop.Text = &quot;開始&quot;;                &#125;            &#125;        &#125;        // 描画処理        private void videoRendering(object sender, NewFrameEventArgs eventArgs)        &#123;            Bitmap img = (Bitmap)eventArgs.Frame.Clone();            Debug.WriteLine(DateTime.Now + &quot;:&quot; + &quot;描画更新&quot;);            // Debug.WriteLine(mode);            try            &#123;                switch (mode)                &#123;                    case &quot;なし&quot;:                        pictureBoxCamera.Image = img;                        break;                    case &quot;グレー&quot;:                        using (OpenCVSharpBitmap bitmap = new OpenCVSharpBitmap(img))                        &#123;                            pictureBoxCamera.Image = bitmap.toGray();                        &#125;                        break;                    case &quot;顔認識&quot;:                        using (OpenCVSharpBitmap bitmap = new OpenCVSharpBitmap(img))                        &#123;                            string strCurDir = System.Environment.CurrentDirectory;                            Debug.WriteLine(strCurDir);                            // pictureBoxCamera.Image = bitmap.addFaceRect(@&quot;C:\Users\gpbjk\source\repos\Original\cs\opencv\haarcascade_frontalface_default.xml&quot;);                            pictureBoxCamera.Image = bitmap.addFaceRect(strCurDir + @&quot;\haarcascade_frontalface_default.xml&quot;);                        &#125;                        break;                    default:                        pictureBoxCamera.Image = img;                        break;                &#125;            &#125;            catch            &#123;                pictureBoxCamera.Image = img;            &#125;        &#125;        // 停止の初期化        private void CloseVideoSource()        &#123;            if (!(videoSource == null))                if (videoSource.IsRunning)                &#123;                    videoSource.SignalToStop();                    videoSource = null;                &#125;        &#125;        // フレームレートの取得        private void timer1_Tick(object sender, EventArgs e)        &#123;            labelFps.Text = videoSource.FramesReceived.ToString() + &quot;FPS&quot;;        &#125;        // ソフト終了時のクローズ処理        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)        &#123;            if (videoSource != null)            &#123;                // Form を閉じる際は映像データ取得をクローズ                if (videoSource.IsRunning)                &#123;                    this.CloseVideoSource();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>描画処理部分で、クラス「OpenCVSharpBitmap 」を使っています。</p><p>このクラスで、映像を加工してBitmapのデータを返す処理を行います。</p><p>▼OpenCVSharpBitmap .cs</p><pre><code>using OpenCvSharp;using OpenCvSharp.Extensions;using System;using System.Drawing;////// オリジナルクラス///namespace Original&#123;    public class OpenCVSharpBitmap : IDisposable    &#123;        private Mat mat;        ///        /// コンストラクタ        ///        ///        public OpenCVSharpBitmap(Bitmap img)        &#123;            this.mat = BitmapConverter.ToMat(img);        &#125;        public void Dispose()        &#123;            ((IDisposable)mat).Dispose();        &#125;        ///        /// グレーに変換したBitmapを取得        ///        ///        public Bitmap toGray()        &#123;            Mat matGray = mat.CvtColor(ColorConversionCodes.BGR2GRAY);            return BitmapConverter.ToBitmap(matGray);        &#125;        ///        /// 顔を認識して赤枠を追加したBitmapを取得        ///        ///        ///        public Bitmap addFaceRect(string @cascadePath)        &#123;            // 分類機の用意            using (CascadeClassifier cascade = new CascadeClassifier(@cascadePath))            &#123;                foreach (Rect rectFace in cascade.DetectMultiScale(mat))                &#123;                    // 見つかった場所に赤枠を表示                    Rect rect = new Rect(rectFace.X, rectFace.Y, rectFace.Width, rectFace.Height);                    mat.Rectangle(rect, new OpenCvSharp.Scalar(0,0,255), 3, LineTypes.Link8);                &#125;            &#125;            return BitmapConverter.ToBitmap(mat);        &#125;    &#125;&#125;</code></pre><hr><h3><span id="7顔認識の方法">⑦顔認識の方法</span></h3><p>顔認識した矩形を映像に加える処理は、補足で説明しておきます。</p><p>まず、今回の顔認識では <strong>「カスケード分類」</strong> と呼ばれる方法を用いています。予め、特定のモノを区別する設定値が含まれるXMLファイル（カスケードファイル）をダウンロードしておき、そのファイルを OpenCvSharp の関数から読み込みます。</p><p>顔認識に必要なXMLファイル「haarcascade_frontalface_default.xml」は、下記のgithubからダウンロードできます。</p><p><a href="https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml">https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml</a></p><p>今回のアプリケーションでは、カスケードファイルを同プロジェクトの実行フォルダに保存して扱うようにしています。</p><p>MainForm.cs</p><pre><code>pictureBoxCamera.Image = bitmap.addFaceRect(strCurDir + @&quot;\haarcascade_frontalface_default.xml&quot;);</code></pre><p>OpenCVSharpBitmap.cs</p><pre><code>using (CascadeClassifier cascade = new CascadeClassifier(@cascadePath))</code></pre><p>このように、カスケードファイルは実行ファイルと同じフォルダのファイルを参照しますので、ビルドする際にはカスケードファイルを一緒に出力させる必要があります。</p><img src="/2023/02/26/20-pc-camera-app-cs/visual_studio_4.png" class><p>これで説明は終了です。</p><p>今回はあくまでシンプルなアプリケーションです。</p><p>画像処理の実装方法などは流用できますので、自分好みのアプリケーションを開発していく参考になれば幸いです。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PCに搭載されているカメラの映像を取得して、解析等を行いたいと思ったことはないでしょうか？&lt;/p&gt;
&lt;p&gt;今回、PCカメラの映像を加工して表示させるアプリケーションを作成しましたので紹介します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atma</summary>
      
    
    
    
    <category term="C#" scheme="https://www.computing-atman.com/categories/C/"/>
    
    
    <category term="C#" scheme="https://www.computing-atman.com/tags/C/"/>
    
    <category term="OpenCV" scheme="https://www.computing-atman.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>【Git】ソースコードをGitへpushする方法</title>
    <link href="https://www.computing-atman.com/2023/02/26/19-git-push-sample/"/>
    <id>https://www.computing-atman.com/2023/02/26/19-git-push-sample/</id>
    <published>2023-02-26T09:00:02.000Z</published>
    <updated>2023-03-05T12:38:42.346Z</updated>
    
    <content type="html"><![CDATA[<p>ソースコードをGitへpushする手順を残しておきます。</p><hr><p>目次</p><!-- toc --><!-- tocstop --><hr><hr><h4><span id="1プロジェクトのフォルダへ移動folder_pathは書き換えてください">①プロジェクトのフォルダへ移動（folder_pathは書き換えてください）</span></h4><p><code>cd folder_path</code></p><hr><h4><span id="2ローカルリポジトリ作成-初回のみでok">②ローカルリポジトリ作成　★初回のみでOK</span></h4><p><code>git init</code></p><hr><h4><span id="3プロジェクトフォルダの全ファイルをインデックスに保存">③プロジェクトフォルダの全ファイルをインデックスに保存</span></h4><p><code>git add -A</code></p><p>（add した内容の確認）</p><p><code>git status</code></p><hr><h4><span id="4add-したファイルをコミット">④add したファイルをコミット</span></h4><p><code>git commit -m &quot;first commit&quot;</code></p><hr><h4><span id="5リモートリポジトリ名-origin-に登録-初回のみでok">⑤リモートリポジトリ名 origin に登録　★初回のみでOK</span></h4><p>github でリポジトリを作成（説明は省略）</p><p><code>git remote add origin https://github.com/対象リポジトリのURL</code><br>（登録したリモートリポジトリの情報確認）</p><p><code>git remote</code><br><code>git remote -v</code></p><hr><h4><span id="6github-にプッシュoriginリモートリポジトリ-masterブランチ">⑥Github にプッシュ（originリモートリポジトリ ← masterブランチ）</span></h4><p><code>git push origin master</code></p><p>※masterブランチにpushする例です。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ソースコードをGitへpushする手順を残しておきます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;!-- toc --&gt;



&lt;!-- tocstop --&gt;

&lt;hr&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&quot;1プロジェクトのフォルダへ移動folder_pathは書き換え</summary>
      
    
    
    
    <category term="Git" scheme="https://www.computing-atman.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.computing-atman.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【AWS】MySQL Workbench から AWS DBにSSH接続</title>
    <link href="https://www.computing-atman.com/2023/02/26/18-ssh-connect-aws-db/"/>
    <id>https://www.computing-atman.com/2023/02/26/18-ssh-connect-aws-db/</id>
    <published>2023-02-26T08:38:13.000Z</published>
    <updated>2023-03-05T12:38:42.346Z</updated>
    
    <content type="html"><![CDATA[<p>AWSなどクラウドにDBを構築している場合、DB開発をローカルPCから行うためにMySQL Workbenchで接続させたい場合があります。</p><p>今回、SSH接続を利用してローカルPCから踏み台サーバー経由でDBサーバーに接続し、MySQL Workbench を用いてDBを操作可能にします。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E6%A7%8B%E6%88%90">システム構成</a></li><li><a href="#%E6%89%8B%E9%A0%86">手順</a><ul><li><a href="#1ssh%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%AB1%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A82config%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BF%9D%E5%AD%98">(1).sshフォルダに①秘密鍵と②configファイルを保存</a></li><li><a href="#2config%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E8%A8%98%E8%BC%89">(2)configファイルの中身を記載</a></li><li><a href="#3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%8B%E3%82%89ssh%E6%8E%A5%E7%B6%9A">(3)コマンドプロンプトからSSH接続</a></li><li><a href="#4mysql-workbench-%E3%81%AB%E3%82%88%E3%82%8Bdb%E6%8E%A5%E7%B6%9A">(4)MySQL Workbench によるDB接続</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="システム構成">システム構成</span></h2><p>下記のような、踏み台サーバーであるWebサーバーを経由してDBに接続するシステム構成とします。</p><img src="/2023/02/26/18-ssh-connect-aws-db/aws_system.png" class><p>この構成に対して、ローカルPCから『DBサーバーのMySQL』へMySQL Workbenchを用いて接続します。</p><h2><span id="手順">手順</span></h2><p>ローカルPCから踏み台サーバーを経由してDBに接続するには、<br><strong>ターミナル（コマンドプロンプト）からSSHで穴（ポートフォワード）を構築</strong> し、<br>その後にMySQL Workbenchから接続します。</p><hr><h3><span id="1sshフォルダに1秘密鍵と2configファイルを保存">(1).sshフォルダに①秘密鍵と②configファイルを保存</span></h3><p>ポートフォワードによりDBサーバーへ接続するため以下の手順を実施します。</p><p>&lt;.sshフォルダの中身&gt;</p><img src="/2023/02/26/18-ssh-connect-aws-db/ssh_folder.png" class><p>configファイルはtxtファイルを作成して、拡張子を削除すれば準備できます。</p><hr><h3><span id="2configファイルの中身を記載">(2)configファイルの中身を記載</span></h3><p>configファイルに下記を記載します。</p><pre><code>Host host_wp  hostname AA.AAA.AA.AAA  port 22  user ec2-user  IdentityFile ~/.ssh/（AWS秘密鍵の名前）.pemHost host_wp_db  hostname bb.bbb.bb.bbb  port 22  user ec2-user  IdentityFile ~/.ssh/（AWS秘密鍵の名前）.pem  ProxyCommand C:\Windows\System32\OpenSSH\ssh.exe -l %r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null host_wp  -W %h:%p  GatewayPorts   yes  LocalForward   9999   localhost:3306</code></pre><p>Webサーバーへの接続　→　host_wp<br>DBサーバーへの接続　→　host_wp_db　が対応しています。</p><p>DBサーバーへの接続は、ProxyCommand で host_wp 接続を経由するように指定しております。</p><p>今回の例では、DBサーバーへの接続（host_wp_db）に、ローカルPCのポート『9999』を利用しています。<br>ポート9999は任意の番号で構いませんが、別アプリケーションで使用されていないことが条件となります。</p><p><strong>【確認方法】</strong><br>コマンドプロンプトで使用されていないポート番号を確認</p><p><code>netstat -nao|find &quot;9999&quot;</code></p><p>上記の実行後、何もコメントが返ってこなければ利用していない。</p><hr><h3><span id="3コマンドプロンプトからssh接続">(3)コマンドプロンプトからSSH接続</span></h3><p>コマンドプロンプトでDBサーバーに接続</p><p><code>ssh host_wp_db</code></p><p>これで、ローカルPCからWebサーバー（踏み台経由）で接続できます。</p><p>コマンドプロンプトを閉じてしまうとSSH接続が切れてしまうので、<br><strong>コマンドプロンプトを立ち上げたまま</strong> にしておいてください。</p><hr><h3><span id="4mysql-workbench-によるdb接続">(4)MySQL Workbench によるDB接続</span></h3><p>MySQL Workbench の Manage Server Connection で下記の設定を追加します。</p><p>&lt;AWS MySQL DBへの接続設定&gt;</p><img src="/2023/02/26/18-ssh-connect-aws-db/mysql_workbench_connect.png" class><p>これでAWSのMySQL DBへ接続可能となります。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AWSなどクラウドにDBを構築している場合、DB開発をローカルPCから行うためにMySQL Workbenchで接続させたい場合があります。&lt;/p&gt;
&lt;p&gt;今回、SSH接続を利用してローカルPCから踏み台サーバー経由でDBサーバーに接続し、MySQL Workbench を</summary>
      
    
    
    
    <category term="AWS" scheme="https://www.computing-atman.com/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://www.computing-atman.com/tags/AWS/"/>
    
    <category term="SSH" scheme="https://www.computing-atman.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】Excelの各シートをファイルに切り出して分割保存</title>
    <link href="https://www.computing-atman.com/2023/02/26/17-excel-sheet-to-file-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/17-excel-sheet-to-file-excel-vba/</id>
    <published>2023-02-26T08:20:18.000Z</published>
    <updated>2023-03-05T12:38:42.346Z</updated>
    
    <content type="html"><![CDATA[<p>Excelでマニュアルなど作成していると、シート数が多くなりすぎてファイル自体が重くなったり、Excelの動作が重くなったりすることはないでしょうか？</p><p>そのような場合に使えそうな、Excelの各シートをファイルに切り出して分割保存するマクロを作成しましたので説明します。</p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/Excel%E3%82%B7%E3%83%BC%E3%83%88%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E5%88%87%E3%82%8A%E5%87%BA%E3%81%97%E5%87%BA%E5%8A%9B">サンプルのExcelをダウンロード</a></p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1main">①Main</a></li><li><a href="#1modulehelper">①ModuleHelper</a></li><li><a href="#2modulesheettofile">②ModuleSheetToFile</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="概要">概要</span></h2><p>今回のマクロ機能は、以下の通りです。</p><ul><li>マクロを実行（ボタン押下）</li><li>各シートをファイルに分割したいExcelファイルを選択</li><li>選択ファイルの各シートをExcelファイルとして切り出し保存<br>（選択したファイルと同フォルダ内）</li><li>マクロ実行Excelファイルに『切り出したファイルのリンク先一覧』を生成</li></ul><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります 。</p><pre><code>Excelの各シートをファイルに切り出し.xlsm|標準モジュール|-Main|-ModuleHelper|-ModuleSheetToFile</code></pre><h2><span id="ソースコード解説">ソースコード解説</span></h2><p>ExcelのVBA、いわゆるマクロ処理のソースコードとなります。</p><h3><span id="1main">①Main</span></h3><pre><code>Option Explicit&#39; メイン処理Public Sub Main()    &#39; 描画処理、自動更新などを停止    Focus True    &#39; Excelシートをファイルに保存する処理    GetOpenFileSheetstSave    &#39; 描画処理、自動更新などを再開    Focus FalseEnd Sub</code></pre><p>メインの GetOpenFileSheetsSave 関数を実行する間に Focus 関数を準備しました。</p><p>この Focus 関数でExcelの描画処理、自動更新などを停止しておくことでマクロ実行時間を短縮させます。</p><hr><h3><span id="1modulehelper">①ModuleHelper</span></h3><p>今回使用する関数です。</p><pre><code>Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 画面描画などを停止して実行を早くする。&#39; note  : Focus = True  -&gt; 描画停止、イベント抑制、手動計算&#39;         Focus = False -&gt; 描画再開、イベント監視再開、自動計算&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub Focus(ByVal Flag As Boolean)    With Application        .EnableEvents = Not Flag        .ScreenUpdating = Not Flag        .Calculation = IIf(Flag, xlCalculationManual, xlCalculationAutomatic)    End WithEnd Sub</code></pre><hr><h3><span id="2modulesheettofile">②ModuleSheetToFile</span></h3><p>ポイントや補足はコード内のコメントに記載しています。</p><pre><code>Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 選択したExcelファイルの各シートをファイルに切り出し&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub GetOpenFileSheetstSave()    Dim openFilePath As String    Dim saveFolderPath As String    openFilePath = Application.GetOpenFilename(FileFilter:=&quot;Excelファイル,*.xlsx&quot;)    If openFilePath &lt;&gt; &quot;False&quot; Then        &#39; ファイルが選択された場合        saveFolderPath = GetFileFolderPath(openFilePath)        SheetsSave openFilePath, saveFolderPath        MsgBox &quot;処理を完了しました&quot;    Else        MsgBox &quot;キャンセルされました&quot;    End IfEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 各シートをファイルに切り出し&#39; note  : 引数の excelPath, saveFolder はフルパス&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub SheetsSave(excelPath As String, saveFolderPath As String)    Dim wb As Workbook    Dim sheet As Object    Dim linkListSheetRow As Long    Dim linkListSheetName As String    linkListSheetRow = 1    linkListSheetName = &quot;__LinkList__&quot;    &#39; ファイル切り出し先リンク一覧のシートを作成    CreateSheet linkListSheetName    &#39; ブックを開く    Set wb = Workbooks.Open(excelPath)    For Each sheet In wb.Worksheets        &#39; 事前に同名のファイルを削除        KillFile saveFolderPath &amp; &quot;\&quot; &amp; sheet.name &amp; &quot;.xlsx&quot;        sheet.Copy        ActiveWorkbook.SaveAs saveFolderPath &amp; &quot;\&quot; &amp; sheet.name        ActiveWorkbook.Close        &#39; ファイル切り出し先リンク一覧へ追加        ThisWorkbook.Worksheets(linkListSheetName).Cells(linkListSheetRow, 1).Value = sheet.name        ThisWorkbook.Worksheets(linkListSheetName).Cells(linkListSheetRow, 2).Value = saveFolderPath &amp; &quot;\&quot; &amp; sheet.name &amp; &quot;.xlsx&quot;        &#39; ハイパーリンク追加（対象のシートをActiveにする必要あり）        ThisWorkbook.Worksheets(linkListSheetName).Activate        ActiveSheet.Hyperlinks.Add Anchor:=Cells(linkListSheetRow, 2), Address:=Cells(linkListSheetRow, 2).Value        linkListSheetRow = linkListSheetRow + 1    Next sheet    &#39; ブックを閉じる    Application.DisplayAlerts = False   &#39;確認メッセージを出さない    wb.Close savechanges:=False         &#39;保存せずに閉じる    Application.DisplayAlerts = True    &#39;確認メッセージを出すEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : シートを追加作成&#39; note  : 作成するシートは最後尾に追加&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub CreateSheet(sheetName As String)    If SheetExists(sheetName) = False Then        ThisWorkbook.Worksheets.Add after:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)        ActiveSheet.name = sheetName    End IfEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 指定したファイルのフォルダパスを取得&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function GetFileFolderPath(filePath As String) As String    Dim pathName As String    Dim fileName As String    fileName = Dir(filePath)    pathName = Replace(filePath, fileName, &quot;&quot;)    pathName = CutRight(pathName, 1)    Debug.Print pathName &amp; vbCrLf &amp; fileName    GetFileFolderPath = pathNameEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 文字列の右側から指定文字数削除&#39; note  : 引数１：対象の文字列、引数２：削除文字数、戻り値：削除後の文字列&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function CutRight(s, i As Long) As String    Dim iLen    As Long     &#39; 文字列長    &#39; 文字列ではない場合    If VarType(s) &lt;&gt; vbString Then        Exit Function    End If    iLen = Len(s)    &#39; 文字列長より指定文字数が大きい場合    If iLen &lt; i Then        Exit Function    End If    &#39; 指定文字数を削除して返す    CutRight = Left(s, iLen - i)End Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : 対象のシートが存在するか判定&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Function SheetExists(sheetName As String) As Boolean    Dim wb As Workbook    Dim ws As Worksheet    Set wb = ThisWorkbook    On Error Resume Next    Set ws = wb.Worksheets(sheetName)    On Error GoTo 0    SheetExists = Not ws Is NothingEnd Function&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : ファイルを削除&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Private Sub KillFile(filePath As String)    Dim strFilePath As String    strFilePath = filePath &#39;ファイルパス    If Dir(strFilePath) &lt;&gt; &quot;&quot; Then        &#39; ファイルが存在する        Debug.Print &quot;ファイル削除開始：&quot; &amp; strFilePath        Kill strFilePath    Else        &#39; ファイルが存在しない        Debug.Print &quot;ファイルは存在しません：&quot; &amp; strFilePath    End IfEnd Sub</code></pre><p>Excelの各シートを別ファイルに切り出して保存するというシンプルな機能ですが、注意すべき点もいくつかあった良いサンプルでした。</p><p>今回の関数は汎用的にも使えるため、関数のアクセス修飾子を private から public に変更して活用してもらってもよいかと思います。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Excelでマニュアルなど作成していると、シート数が多くなりすぎてファイル自体が重くなったり、Excelの動作が重くなったりすることはないでしょうか？&lt;/p&gt;
&lt;p&gt;そのような場合に使えそうな、Excelの各シートをファイルに切り出して分割保存するマクロを作成しましたので説</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
  </entry>
  
  <entry>
    <title>【WordPress】Google AdSenseのads.txt設置方法</title>
    <link href="https://www.computing-atman.com/2023/02/26/16-set-google-adsense-file-wordpress/"/>
    <id>https://www.computing-atman.com/2023/02/26/16-set-google-adsense-file-wordpress/</id>
    <published>2023-02-25T15:29:26.000Z</published>
    <updated>2023-03-05T12:38:42.330Z</updated>
    
    <content type="html"><![CDATA[<p>Google AdSense を使っていると、自分のログインページに下記のようなアラートが表示されることがあります</p><img src="/2023/02/26/16-set-google-adsense-file-wordpress/google-adsense-alert.png" class><p>Google のヘルプによると、ads.txtは広告枠が偽物でないと判別できるようになると記載されており推奨されています。</p><blockquote><p>ads.txt は、使用することを強くおすすめします。ads.txt を使用すれば、購入者が偽の広告枠を判別できるため、サイト運営者様としても偽の広告枠に収益が流れるのを阻止し、その分収益を増やすことができるというメリットがあります。</p><p><a href="https://support.google.com/adsense/answer/7532444?hl=ja">https://support.google.com/adsense/answer/7532444?hl=ja</a></p></blockquote><p>そのためには、Google AdSense で入手した ads.txt をWebサーバーのルートディレクトリに保存しなくてはなりません。<br>AWSによりWordPressを構築した際、ads.txtの設置場所に少しハマりましたので記事に残しておきます。</p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%89%8B%E9%A0%86">手順</a><ul><li><a href="#1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%A7%E3%81%8D%E3%82%8Bwordpress%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">①ファイルをアップロードできるWordPressプラグインをインストール</a></li><li><a href="#2%E3%83%AB%E3%83%BC%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%ABadstxt%E3%82%92%E4%BF%9D%E5%AD%98">②ルートディレクトリにads.txtを保存</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="手順">手順</span></h2><hr><h3><span id="1ファイルをアップロードできるwordpressプラグインをインストール">①ファイルをアップロードできるWordPressプラグインをインストール</span></h3><p>まずルートディレクトリがどこなのか？ということなのですが、結論からいうとWebサイトのTopページが格納されているフォルダです。</p><p>WordPressにファイルを追加する方法はいくつかあるのですが、ここでは <strong>Advanced File Manager</strong> という便利なプラグインを利用することとします。</p><p>下記のように、プラグイン追加で Advanced Fie Manager を検索してインストールします。</p><img src="/2023/02/26/16-set-google-adsense-file-wordpress/advanced-file-manager.png" class><hr><h3><span id="2ルートディレクトリにadstxtを保存">②ルートディレクトリにads.txtを保存</span></h3><p>プラグインを追加して有効化すると、WordPressのダッシュボードに『File Manager』が追加されます。</p><p>その File Manager をクリックして <strong>左タブの『html』をクリックして表示されている部分がルートディレクトリ</strong> です。</p><p>後は ads.txt をルートディレクトリに保存すれば完了です。</p><img src="/2023/02/26/16-set-google-adsense-file-wordpress/wordpress-file-manager.png" class><p>ルートディレクトリは Top Page 、つまり WordPress でいえば、index.php が保存されているフォルダとなります。</p><p>参考になれば幸いです。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google AdSense を使っていると、自分のログインページに下記のようなアラートが表示されることがあります&lt;/p&gt;
&lt;img src=&quot;/2023/02/26/16-set-google-adsense-file-wordpress/google-adsense-a</summary>
      
    
    
    
    <category term="WordPress" scheme="https://www.computing-atman.com/categories/WordPress/"/>
    
    
    <category term="WordPress" scheme="https://www.computing-atman.com/tags/WordPress/"/>
    
    <category term="GoogleAdSense" scheme="https://www.computing-atman.com/tags/GoogleAdSense/"/>
    
  </entry>
  
  <entry>
    <title>【VBA】ExcelからSQL Plusを実行してセッション切断</title>
    <link href="https://www.computing-atman.com/2023/02/26/15-kill-oracle-session-excel-vba/"/>
    <id>https://www.computing-atman.com/2023/02/26/15-kill-oracle-session-excel-vba/</id>
    <published>2023-02-25T15:14:41.000Z</published>
    <updated>2023-03-05T12:38:42.330Z</updated>
    
    <content type="html"><![CDATA[<p>Oracleデータベースを使ったアプリケーションでは、誰かがアプリを操作したままとなり、<br>データベースがロックされた状態になることがあります。</p><p>今回、そのロック状態を解除するため、<br>ExcelからSQL Plus を実行してセッションを強制切断（ロック解除）する方法を説明します。</p><p><a href="https://github.com/atman-33/template-excel-vba/tree/main/SQLPlus%E5%AE%9F%E8%A1%8C_Oracle%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%88%87%E6%96%AD">サンプルのExcelをダウンロード</a></p><hr><p>目次</p><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E6%A7%8B%E6%88%90">パッケージ構成</a></li><li><a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E8%A7%A3%E8%AA%AC">ソースコード解説</a><ul><li><a href="#1modulesqlplus">①ModuleSqlPlus</a></li><li><a href="#2main">②Main</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="概要">概要</span></h2><p>まず、Oracleがロック状態になっていることを確認してみます。</p><p>下記のSQLを、SQL Developer やSQL Plusu から実行することで、<br>ロック状態を引き起こしているのが <strong>どこから（どのPCから）の接続なのか</strong> 確認できます。</p><pre><code>select   s.sid, s.serial#, s.username, s.osuser, s.machine, s.terminal, s.program, o.object_name from   v$session s, v$locked_object l, dba_objects o where   s.sid = l.session_id and l.object_id = o.object_id</code></pre><p>ロック状態の場合は下記のようにレコードが抽出されます。</p><img src="/2023/02/26/15-kill-oracle-session-excel-vba/oracle-lock.png" class><p>ロック状態を解除するには、抽出したレコードの中にあるSIDとSERIAL#が必要となります。<br>（上の例では、 SID&#x3D;277, SERIAL#&#x3D;18621）</p><h2><span id="パッケージ構成">パッケージ構成</span></h2><p>Excelマクロ内の構成は下記となります。</p><pre><code>標準モジュール|- Main|- ModuleSqlPlus</code></pre><p>main から modSqlPlus の関数を呼び出すシンプルな構造です。</p><h2><span id="ソースコード解説">ソースコード解説</span></h2><p>ExcelのVBA、いわゆるマクロ処理のソースコードとなります。</p><hr><h3><span id="1modulesqlplus">①ModuleSqlPlus</span></h3><p>SQL Plus からSQLを実行するために必要な関数を格納しています。</p><pre><code class="vb:ModuleSqlPlus">Option Explicit&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : SQL文からSQLPlusを実行&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub Sqlplus(user As String, password As String, serviceName As String, sql As String)    Dim sqlFile As String    &#39; 実行するSQLファイル    sqlFile = &quot;temp.sql&quot;    &#39; SQLファイルを作成    CreateSqlFile sqlFile, sql    Debug.Print &quot;【実行するSQL文】&quot;    Debug.Print &quot;---- ---- ----&quot;    Debug.Print sql    Debug.Print &quot;---- ---- ----&quot;    &#39; SQLPLUSからSQLファイルを実行    SqlplusFromFile user, password, serviceName, sqlFile    &#39; SQLファイルを削除    KillSqlFile sqlFileEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : SQLファイルからSQLPlusを実行&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub SqlplusFromFile(user As String, password As String, serviceName As String, sqlFile As String)    Dim cmd As String     &#39;シェルコマンド    Dim objWSH As Object  &#39;WSH    cmd = &quot;sqlplus &quot; &amp; user &amp; &quot;/&quot; &amp; password &amp; &quot;@&quot; &amp; serviceName &amp; &quot; as sysdba &quot; &amp; &quot;@&quot; &amp; ActiveWorkbook.Path &amp; &quot;\&quot; &amp; sqlFile    Debug.Print &quot;ORACLE; sqlplusを実行&quot;    Debug.Print cmd    &#39;非同期で実行される    &#39;Call Shell(cmd, vbHide)On Error GoTo Exception    &#39;同期で実行する    Set objWSH = CreateObject(&quot;WScript.Shell&quot;)    objWSH.Run cmd, 1, True    GoTo FinallyException:    Call MsgBox(Err.Description, vbOKOnly, &quot;異常終了&quot;)    GoTo FinallyFinally:    Set objWSH = Nothing              &#39; オブジェクトを解放End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : セッションを切るSQLコマンドを実施&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub KillSession(user As String, password As String, serviceName As String, sid As String, serial As String)    Dim sql As String    &#39; 実行するSQL    sql = &quot;alter system kill session &#39;&quot; &amp; sid &amp; &quot;,&quot; &amp; serial &amp; &quot;&#39;;&quot; &amp; vbCrLf &amp; &quot;exit;&quot;    Sqlplus user, password, serviceName, sqlEnd Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : SQLファイルを作成&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub CreateSqlFile(fileName As String, sql As String)    Dim strFilePath As String    strFilePath = ActiveWorkbook.Path &amp; &quot;\&quot; &amp; fileName &#39;ファイルパス    Debug.Print &quot;ファイル作成：&quot; &amp; strFilePath    Open strFilePath For Output As #1    Print #1, sql    Close #1End Sub&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----&#39; brief : SQLファイルを削除&#39; note  :&#39; ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----Public Sub KillSqlFile(fileName As String)    Dim strFilePath As String    strFilePath = ActiveWorkbook.Path &amp; &quot;\&quot; &amp; fileName &#39;ファイルパス    Debug.Print &quot;ファイル削除開始：&quot; &amp; strFilePath    Kill strFilePathEnd Sub</code></pre><p>SQL Plus Windows Shell、つまりコマンドプロンプトから実行する必要があります。</p><p>そのため、一度SQL文が格納されたファイルを作成し、そのファイルをSQL Plus で実行するようにしています。</p><hr><h3><span id="2main">②Main</span></h3><p>Oracle接続している（ロックしている）セッションを切断します。</p><pre><code>Option Explicit&#39; メイン処理Public Sub Main()    Dim user As String    Dim password As String    Dim serviceName As String    Dim sid As String    Dim serial As String    user = &quot;sys&quot;    password = &quot;1234&quot;    serviceName = &quot;TESTDB&quot;    sid = &quot;277&quot;    serial = &quot;16127&quot;    &#39; Oracle接続セッションを切断    KillSession user, password, serviceName, sid, serial    Debug.Print &quot;処理終了&quot;End Sub</code></pre><p>上記の例では、modSqlPlusモジュールのkillSession を呼び出して、その引数に必要なSIDとSERIAL#を渡しています。</p><p>以上です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Oracleデータベースを使ったアプリケーションでは、誰かがアプリを操作したままとなり、&lt;br&gt;データベースがロックされた状態になることがあります。&lt;/p&gt;
&lt;p&gt;今回、そのロック状態を解除するため、&lt;br&gt;ExcelからSQL Plus を実行してセッションを強制切断（ロ</summary>
      
    
    
    
    <category term="VBA" scheme="https://www.computing-atman.com/categories/VBA/"/>
    
    
    <category term="Excel" scheme="https://www.computing-atman.com/tags/Excel/"/>
    
    <category term="VBA" scheme="https://www.computing-atman.com/tags/VBA/"/>
    
    <category term="SQL Plus" scheme="https://www.computing-atman.com/tags/SQL-Plus/"/>
    
  </entry>
  
</feed>
